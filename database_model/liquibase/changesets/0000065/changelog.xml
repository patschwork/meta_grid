<?xml version="1.0" encoding="UTF-8"?>

	<databaseChangeLog
    xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext"
    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd
    http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd"
	
	logicalFilePath="000065/changelog.xml">

	<changeSet author="patrick_schmitz" id="000065" context="deleted_state">

		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_keyfigure_log_INSERT;
		]]>
		</sql>
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_keyfigure_log_INSERT AFTER INSERT
ON keyfigure
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   INSERT INTO keyfigure_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,formula,aggregation,character,type,unit,value_range,cumulation_possible,fk_deleted_status_id, fk_deleted_status_uuid) VALUES ('INSERT',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.fk_project_id, (SELECT uuid FROM project WHERE id=new.fk_project_id),new.name,new.description,new.formula,new.aggregation,new.character,new.type,new.unit,new.value_range,new.cumulation_possible,new.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=new.fk_deleted_status_id));
   UPDATE keyfigure SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   DELETE FROM _newUUID;
   DELETE FROM keyfigure_log WHERE log_id=(SELECT MAX(log_id)+1 FROM keyfigure_log WHERE log_action='INSERT' AND id=new.id) AND log_action='UPDATE' AND id=new.id; --Aufraeumen des ungewollten Datensatz beim INSERT (erzeugt durch den UPDATE TRIGGER)
END;
		]]>
		</sql>

		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_keyfigure_log_UPDATE;
		]]>
		</sql>
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_keyfigure_log_UPDATE AFTER UPDATE
ON keyfigure
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   UPDATE keyfigure SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   INSERT INTO keyfigure_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,formula,aggregation,character,type,unit,value_range,cumulation_possible,fk_deleted_status_id, fk_deleted_status_uuid) VALUES ('UPDATE',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.fk_project_id, (SELECT uuid FROM project WHERE id=new.fk_project_id),new.name,new.description,new.formula,new.aggregation,new.character,new.type,new.unit,new.value_range,new.cumulation_possible,new.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=new.fk_deleted_status_id));
   DELETE FROM _newUUID;
END;
		]]>
		</sql>


		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_keyfigure_log_DELETE;
		]]>
		</sql>

		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_keyfigure_log_DELETE AFTER DELETE
ON keyfigure
BEGIN
   INSERT INTO keyfigure_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,formula,aggregation,character,type,unit,value_range,cumulation_possible,fk_deleted_status_id, fk_deleted_status_uuid) VALUES ('DELETE',old.id,old.uuid,old.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=old.fk_object_type_id),old.fk_project_id, (SELECT uuid FROM project WHERE id=old.fk_project_id),old.name,old.description,old.formula,old.aggregation,old.character,old.type,old.unit,old.value_range,old.cumulation_possible,old.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=old.fk_deleted_status_id));

   INSERT INTO cleanup_queue (ref_fk_object_id, ref_fk_object_type_id) VALUES (old.id, old.fk_object_type_id);
END;
		]]>
		</sql>

		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_sourcesystem_log_INSERT;
		]]>
		</sql>
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_sourcesystem_log_INSERT AFTER INSERT
ON sourcesystem
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   INSERT INTO sourcesystem_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,fk_contact_group_id_as_supporter, fk_contact_group_uuid_as_supporter,fk_deleted_status_id, fk_deleted_status_uuid) VALUES ('INSERT',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.fk_project_id, (SELECT uuid FROM project WHERE id=new.fk_project_id),new.name,new.description,new.fk_contact_group_id_as_supporter, (SELECT uuid FROM contact_group WHERE id=new.fk_contact_group_id_as_supporter),new.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=new.fk_deleted_status_id));
   UPDATE sourcesystem SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   DELETE FROM _newUUID;
   DELETE FROM sourcesystem_log WHERE log_id=(SELECT MAX(log_id)+1 FROM sourcesystem_log WHERE log_action='INSERT' AND id=new.id) AND log_action='UPDATE' AND id=new.id; --Aufraeumen des ungewollten Datensatz beim INSERT (erzeugt durch den UPDATE TRIGGER)
END;
		]]>
		</sql>

		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_sourcesystem_log_UPDATE;
		]]>
		</sql>
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_sourcesystem_log_UPDATE AFTER UPDATE
ON sourcesystem
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   UPDATE sourcesystem SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   INSERT INTO sourcesystem_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,fk_contact_group_id_as_supporter, fk_contact_group_uuid_as_supporter,fk_deleted_status_id, fk_deleted_status_uuid) VALUES ('UPDATE',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.fk_project_id, (SELECT uuid FROM project WHERE id=new.fk_project_id),new.name,new.description,new.fk_contact_group_id_as_supporter, (SELECT uuid FROM contact_group WHERE id=new.fk_contact_group_id_as_supporter),new.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=new.fk_deleted_status_id));
   DELETE FROM _newUUID;
END;
		]]>
		</sql>

		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_sourcesystem_log_DELETE;
		]]>
		</sql>
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_sourcesystem_log_DELETE AFTER DELETE
ON sourcesystem
BEGIN
   INSERT INTO sourcesystem_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,fk_contact_group_id_as_supporter, fk_contact_group_uuid_as_supporter,fk_deleted_status_id, fk_deleted_status_uuid) VALUES ('DELETE',old.id,old.uuid,old.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=old.fk_object_type_id),old.fk_project_id, (SELECT uuid FROM project WHERE id=old.fk_project_id),old.name,old.description,old.fk_contact_group_id_as_supporter, (SELECT uuid FROM contact_group WHERE id=old.fk_contact_group_id_as_supporter),old.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=old.fk_deleted_status_id));

   INSERT INTO cleanup_queue (ref_fk_object_id, ref_fk_object_type_id) VALUES (old.id, old.fk_object_type_id);
END;
		]]>
		</sql>

		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_data_delivery_object_log_INSERT;
		]]>
		</sql>
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_data_delivery_object_log_INSERT AFTER INSERT
ON data_delivery_object
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   INSERT INTO data_delivery_object_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,fk_tool_id, fk_tool_uuid,fk_data_delivery_type_id, fk_data_delivery_type_uuid,fk_contact_group_id_as_data_owner, fk_contact_group_uuid_as_data_owner,fk_deleted_status_id, fk_deleted_status_uuid) VALUES ('INSERT',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.fk_project_id, (SELECT uuid FROM project WHERE id=new.fk_project_id),new.name,new.description,new.fk_tool_id, (SELECT uuid FROM tool WHERE id=new.fk_tool_id),new.fk_data_delivery_type_id, (SELECT uuid FROM data_delivery_type WHERE id=new.fk_data_delivery_type_id),new.fk_contact_group_id_as_data_owner, (SELECT uuid FROM contact_group WHERE id=new.fk_contact_group_id_as_data_owner),new.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=new.fk_deleted_status_id));
   UPDATE data_delivery_object SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   DELETE FROM _newUUID;
   DELETE FROM data_delivery_object_log WHERE log_id=(SELECT MAX(log_id)+1 FROM data_delivery_object_log WHERE log_action='INSERT' AND id=new.id) AND log_action='UPDATE' AND id=new.id; --Aufraeumen des ungewollten Datensatz beim INSERT (erzeugt durch den UPDATE TRIGGER)
END;
		]]>
		</sql>

		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_data_delivery_object_log_UPDATE;
		]]>
		</sql>
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_data_delivery_object_log_UPDATE AFTER UPDATE
ON data_delivery_object
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   UPDATE data_delivery_object SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   INSERT INTO data_delivery_object_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,fk_tool_id, fk_tool_uuid,fk_data_delivery_type_id, fk_data_delivery_type_uuid,fk_contact_group_id_as_data_owner, fk_contact_group_uuid_as_data_owner,fk_deleted_status_id, fk_deleted_status_uuid) VALUES ('UPDATE',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.fk_project_id, (SELECT uuid FROM project WHERE id=new.fk_project_id),new.name,new.description,new.fk_tool_id, (SELECT uuid FROM tool WHERE id=new.fk_tool_id),new.fk_data_delivery_type_id, (SELECT uuid FROM data_delivery_type WHERE id=new.fk_data_delivery_type_id),new.fk_contact_group_id_as_data_owner, (SELECT uuid FROM contact_group WHERE id=new.fk_contact_group_id_as_data_owner),new.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=new.fk_deleted_status_id));
   DELETE FROM _newUUID;
END;
		]]>
		</sql>

		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_data_delivery_object_log_DELETE;
		]]>
		</sql>
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_data_delivery_object_log_DELETE AFTER DELETE
ON data_delivery_object
BEGIN
   INSERT INTO data_delivery_object_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,fk_tool_id, fk_tool_uuid,fk_data_delivery_type_id, fk_data_delivery_type_uuid,fk_contact_group_id_as_data_owner, fk_contact_group_uuid_as_data_owner,fk_deleted_status_id, fk_deleted_status_uuid) VALUES ('DELETE',old.id,old.uuid,old.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=old.fk_object_type_id),old.fk_project_id, (SELECT uuid FROM project WHERE id=old.fk_project_id),old.name,old.description,old.fk_tool_id, (SELECT uuid FROM tool WHERE id=old.fk_tool_id),old.fk_data_delivery_type_id, (SELECT uuid FROM data_delivery_type WHERE id=old.fk_data_delivery_type_id),old.fk_contact_group_id_as_data_owner, (SELECT uuid FROM contact_group WHERE id=old.fk_contact_group_id_as_data_owner),old.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=old.fk_deleted_status_id));

   INSERT INTO cleanup_queue (ref_fk_object_id, ref_fk_object_type_id) VALUES (old.id, old.fk_object_type_id);
END;
		]]>
		</sql>


		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_db_table_log_INSERT;
		]]>
		</sql>
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_db_table_log_INSERT AFTER INSERT
ON db_table
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   INSERT INTO db_table_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,location,fk_db_table_context_id, fk_db_table_context_uuid,fk_db_table_type_id, fk_db_table_type_uuid,fk_deleted_status_id, fk_deleted_status_uuid) VALUES ('INSERT',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.fk_project_id, (SELECT uuid FROM project WHERE id=new.fk_project_id),new.name,new.description,new.location,new.fk_db_table_context_id, (SELECT uuid FROM db_table_context WHERE id=new.fk_db_table_context_id),new.fk_db_table_type_id, (SELECT uuid FROM db_table_type WHERE id=new.fk_db_table_type_id),new.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=new.fk_deleted_status_id));
   UPDATE db_table SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   DELETE FROM _newUUID;
   DELETE FROM db_table_log WHERE log_id=(SELECT MAX(log_id)+1 FROM db_table_log WHERE log_action='INSERT' AND id=new.id) AND log_action='UPDATE' AND id=new.id; --Aufraeumen des ungewollten Datensatz beim INSERT (erzeugt durch den UPDATE TRIGGER)
END;
		]]>
		</sql>

		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_db_table_log_UPDATE;
		]]>
		</sql>
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_db_table_log_UPDATE AFTER UPDATE
ON db_table
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   UPDATE db_table SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   INSERT INTO db_table_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,location,fk_db_table_context_id, fk_db_table_context_uuid,fk_db_table_type_id, fk_db_table_type_uuid,fk_deleted_status_id, fk_deleted_status_uuid) VALUES ('UPDATE',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.fk_project_id, (SELECT uuid FROM project WHERE id=new.fk_project_id),new.name,new.description,new.location,new.fk_db_table_context_id, (SELECT uuid FROM db_table_context WHERE id=new.fk_db_table_context_id),new.fk_db_table_type_id, (SELECT uuid FROM db_table_type WHERE id=new.fk_db_table_type_id),new.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=new.fk_deleted_status_id));
   DELETE FROM _newUUID;
END;
		]]>
		</sql>

		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_db_table_log_DELETE;
		]]>
		</sql>
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_db_table_log_DELETE AFTER DELETE
ON db_table
BEGIN
   INSERT INTO db_table_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,location,fk_db_table_context_id, fk_db_table_context_uuid,fk_db_table_type_id, fk_db_table_type_uuid,fk_deleted_status_id, fk_deleted_status_uuid) VALUES ('DELETE',old.id,old.uuid,old.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=old.fk_object_type_id),old.fk_project_id, (SELECT uuid FROM project WHERE id=old.fk_project_id),old.name,old.description,old.location,old.fk_db_table_context_id, (SELECT uuid FROM db_table_context WHERE id=old.fk_db_table_context_id),old.fk_db_table_type_id, (SELECT uuid FROM db_table_type WHERE id=old.fk_db_table_type_id),old.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=old.fk_deleted_status_id));

   INSERT INTO cleanup_queue (ref_fk_object_id, ref_fk_object_type_id) VALUES (old.id, old.fk_object_type_id);
END;
		]]>
		</sql>


		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_db_table_field_log_INSERT;
		]]>
		</sql>
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_db_table_field_log_INSERT AFTER INSERT
ON db_table_field
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   INSERT INTO db_table_field_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,fk_db_table_id, fk_db_table_uuid,datatype,bulk_load_checksum,fk_deleted_status_id, fk_deleted_status_uuid) VALUES ('INSERT',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.fk_project_id, (SELECT uuid FROM project WHERE id=new.fk_project_id),new.name,new.description,new.fk_db_table_id, (SELECT uuid FROM db_table WHERE id=new.fk_db_table_id),new.datatype,new.bulk_load_checksum,new.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=new.fk_deleted_status_id));
   UPDATE db_table_field SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   DELETE FROM _newUUID;
   DELETE FROM db_table_field_log WHERE log_id=(SELECT MAX(log_id)+1 FROM db_table_field_log WHERE log_action='INSERT' AND id=new.id) AND log_action='UPDATE' AND id=new.id; --Aufraeumen des ungewollten Datensatz beim INSERT (erzeugt durch den UPDATE TRIGGER)
END;
		]]>
		</sql>

		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_db_table_field_log_UPDATE;
		]]>
		</sql>
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_db_table_field_log_UPDATE AFTER UPDATE
ON db_table_field
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   UPDATE db_table_field SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   INSERT INTO db_table_field_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,fk_db_table_id, fk_db_table_uuid,datatype,bulk_load_checksum,fk_deleted_status_id, fk_deleted_status_uuid) VALUES ('UPDATE',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.fk_project_id, (SELECT uuid FROM project WHERE id=new.fk_project_id),new.name,new.description,new.fk_db_table_id, (SELECT uuid FROM db_table WHERE id=new.fk_db_table_id),new.datatype,new.bulk_load_checksum,new.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=new.fk_deleted_status_id));
   DELETE FROM _newUUID;
END;
		]]>
		</sql>

		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_db_table_field_log_DELETE;
		]]>
		</sql>
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_db_table_field_log_DELETE AFTER DELETE
ON db_table_field
BEGIN
   INSERT INTO db_table_field_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,fk_db_table_id, fk_db_table_uuid,datatype,bulk_load_checksum,fk_deleted_status_id, fk_deleted_status_uuid) VALUES ('DELETE',old.id,old.uuid,old.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=old.fk_object_type_id),old.fk_project_id, (SELECT uuid FROM project WHERE id=old.fk_project_id),old.name,old.description,old.fk_db_table_id, (SELECT uuid FROM db_table WHERE id=old.fk_db_table_id),old.datatype,old.bulk_load_checksum,old.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=old.fk_deleted_status_id));

   INSERT INTO cleanup_queue (ref_fk_object_id, ref_fk_object_type_id) VALUES (old.id, old.fk_object_type_id);
END;
		]]>
		</sql>


		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_parameter_log_INSERT;
		]]>
		</sql>
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_parameter_log_INSERT AFTER INSERT
ON parameter
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   INSERT INTO parameter_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,is_optional,default_value,datatype,range,fk_deleted_status_id, fk_deleted_status_uuid) VALUES ('INSERT',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.fk_project_id, (SELECT uuid FROM project WHERE id=new.fk_project_id),new.name,new.description,new.is_optional,new.default_value,new.datatype,new.range,new.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=new.fk_deleted_status_id));
   UPDATE parameter SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   DELETE FROM _newUUID;
   DELETE FROM parameter_log WHERE log_id=(SELECT MAX(log_id)+1 FROM parameter_log WHERE log_action='INSERT' AND id=new.id) AND log_action='UPDATE' AND id=new.id; --Aufraeumen des ungewollten Datensatz beim INSERT (erzeugt durch den UPDATE TRIGGER)
END;
		]]>
		</sql>

		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_parameter_log_UPDATE;
		]]>
		</sql>
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_parameter_log_UPDATE AFTER UPDATE
ON parameter
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   UPDATE parameter SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   INSERT INTO parameter_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,is_optional,default_value,datatype,range,fk_deleted_status_id, fk_deleted_status_uuid) VALUES ('UPDATE',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.fk_project_id, (SELECT uuid FROM project WHERE id=new.fk_project_id),new.name,new.description,new.is_optional,new.default_value,new.datatype,new.range,new.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=new.fk_deleted_status_id));
   DELETE FROM _newUUID;
END;
		]]>
		</sql>

		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_parameter_log_DELETE;
		]]>
		</sql>
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_parameter_log_DELETE AFTER DELETE
ON parameter
BEGIN
   INSERT INTO parameter_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,is_optional,default_value,datatype,range,fk_deleted_status_id, fk_deleted_status_uuid) VALUES ('DELETE',old.id,old.uuid,old.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=old.fk_object_type_id),old.fk_project_id, (SELECT uuid FROM project WHERE id=old.fk_project_id),old.name,old.description,old.is_optional,old.default_value,old.datatype,old.range,old.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=old.fk_deleted_status_id));

   INSERT INTO cleanup_queue (ref_fk_object_id, ref_fk_object_type_id) VALUES (old.id, old.fk_object_type_id);
END;
		]]>
		</sql>



		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_scheduling_log_INSERT;
		]]>
		</sql>
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_scheduling_log_INSERT AFTER INSERT
ON scheduling
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   INSERT INTO scheduling_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,fk_tool_id, fk_tool_uuid,scheduling_series,fk_deleted_status_id, fk_deleted_status_uuid) VALUES ('INSERT',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.fk_project_id, (SELECT uuid FROM project WHERE id=new.fk_project_id),new.name,new.description,new.fk_tool_id, (SELECT uuid FROM tool WHERE id=new.fk_tool_id),new.scheduling_series,new.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=new.fk_deleted_status_id));
   UPDATE scheduling SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   DELETE FROM _newUUID;
   DELETE FROM scheduling_log WHERE log_id=(SELECT MAX(log_id)+1 FROM scheduling_log WHERE log_action='INSERT' AND id=new.id) AND log_action='UPDATE' AND id=new.id; --Aufraeumen des ungewollten Datensatz beim INSERT (erzeugt durch den UPDATE TRIGGER)
END;
		]]>
		</sql>

		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_scheduling_log_UPDATE;
		]]>
		</sql>
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_scheduling_log_UPDATE AFTER UPDATE
ON scheduling
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   UPDATE scheduling SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   INSERT INTO scheduling_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,fk_tool_id, fk_tool_uuid,scheduling_series,fk_deleted_status_id, fk_deleted_status_uuid) VALUES ('UPDATE',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.fk_project_id, (SELECT uuid FROM project WHERE id=new.fk_project_id),new.name,new.description,new.fk_tool_id, (SELECT uuid FROM tool WHERE id=new.fk_tool_id),new.scheduling_series,new.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=new.fk_deleted_status_id));
   DELETE FROM _newUUID;
END;
		]]>
		</sql>

		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_scheduling_log_DELETE;
		]]>
		</sql>
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_scheduling_log_DELETE AFTER DELETE
ON scheduling
BEGIN
   INSERT INTO scheduling_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,fk_tool_id, fk_tool_uuid,scheduling_series,fk_deleted_status_id, fk_deleted_status_uuid) VALUES ('DELETE',old.id,old.uuid,old.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=old.fk_object_type_id),old.fk_project_id, (SELECT uuid FROM project WHERE id=old.fk_project_id),old.name,old.description,old.fk_tool_id, (SELECT uuid FROM tool WHERE id=old.fk_tool_id),old.scheduling_series,old.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=old.fk_deleted_status_id));

   INSERT INTO cleanup_queue (ref_fk_object_id, ref_fk_object_type_id) VALUES (old.id, old.fk_object_type_id);
END;
		]]>
		</sql>


		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_db_database_log_INSERT;
		]]>
		</sql>
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_db_database_log_INSERT AFTER INSERT
ON db_database
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   INSERT INTO db_database_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,fk_tool_id, fk_tool_uuid,fk_deleted_status_id, fk_deleted_status_uuid) VALUES ('INSERT',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.fk_project_id, (SELECT uuid FROM project WHERE id=new.fk_project_id),new.name,new.description,new.fk_tool_id, (SELECT uuid FROM tool WHERE id=new.fk_tool_id),new.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=new.fk_deleted_status_id));
   UPDATE db_database SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   DELETE FROM _newUUID;
   DELETE FROM db_database_log WHERE log_id=(SELECT MAX(log_id)+1 FROM db_database_log WHERE log_action='INSERT' AND id=new.id) AND log_action='UPDATE' AND id=new.id; --Aufraeumen des ungewollten Datensatz beim INSERT (erzeugt durch den UPDATE TRIGGER)
END;
		]]>
		</sql>

		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_db_database_log_UPDATE;
		]]>
		</sql>
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_db_database_log_UPDATE AFTER UPDATE
ON db_database
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   UPDATE db_database SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   INSERT INTO db_database_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,fk_tool_id, fk_tool_uuid,fk_deleted_status_id, fk_deleted_status_uuid) VALUES ('UPDATE',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.fk_project_id, (SELECT uuid FROM project WHERE id=new.fk_project_id),new.name,new.description,new.fk_tool_id, (SELECT uuid FROM tool WHERE id=new.fk_tool_id),new.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=new.fk_deleted_status_id));
   DELETE FROM _newUUID;
END;
		]]>
		</sql>

		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_db_database_log_DELETE;
		]]>
		</sql>
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_db_database_log_DELETE AFTER DELETE
ON db_database
BEGIN
   INSERT INTO db_database_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,fk_tool_id, fk_tool_uuid,fk_deleted_status_id, fk_deleted_status_uuid) VALUES ('DELETE',old.id,old.uuid,old.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=old.fk_object_type_id),old.fk_project_id, (SELECT uuid FROM project WHERE id=old.fk_project_id),old.name,old.description,old.fk_tool_id, (SELECT uuid FROM tool WHERE id=old.fk_tool_id),old.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=old.fk_deleted_status_id));

   INSERT INTO cleanup_queue (ref_fk_object_id, ref_fk_object_type_id) VALUES (old.id, old.fk_object_type_id);
END;
		]]>
		</sql>


		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_data_transfer_process_log_INSERT;
		]]>
		</sql>
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_data_transfer_process_log_INSERT AFTER INSERT
ON data_transfer_process
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   INSERT INTO data_transfer_process_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,fk_data_transfer_type_id, fk_data_transfer_type_uuid,location,source_internal_object_id,fk_deleted_status_id, fk_deleted_status_uuid) VALUES ('INSERT',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.fk_project_id, (SELECT uuid FROM project WHERE id=new.fk_project_id),new.name,new.description,new.fk_data_transfer_type_id, (SELECT uuid FROM data_transfer_type WHERE id=new.fk_data_transfer_type_id),new.location,new.source_internal_object_id,new.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=new.fk_deleted_status_id));
   UPDATE data_transfer_process SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   DELETE FROM _newUUID;
   DELETE FROM data_transfer_process_log WHERE log_id=(SELECT MAX(log_id)+1 FROM data_transfer_process_log WHERE log_action='INSERT' AND id=new.id) AND log_action='UPDATE' AND id=new.id; --Aufraeumen des ungewollten Datensatz beim INSERT (erzeugt durch den UPDATE TRIGGER)
END;
		]]>
		</sql>

		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_data_transfer_process_log_UPDATE;
		]]>
		</sql>
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_data_transfer_process_log_UPDATE AFTER UPDATE
ON data_transfer_process
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   UPDATE data_transfer_process SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   INSERT INTO data_transfer_process_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,fk_data_transfer_type_id, fk_data_transfer_type_uuid,location,source_internal_object_id,fk_deleted_status_id, fk_deleted_status_uuid) VALUES ('UPDATE',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.fk_project_id, (SELECT uuid FROM project WHERE id=new.fk_project_id),new.name,new.description,new.fk_data_transfer_type_id, (SELECT uuid FROM data_transfer_type WHERE id=new.fk_data_transfer_type_id),new.location,new.source_internal_object_id,new.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=new.fk_deleted_status_id));
   DELETE FROM _newUUID;
END;
		]]>
		</sql>

		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_data_transfer_process_log_DELETE;
		]]>
		</sql>
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_data_transfer_process_log_DELETE AFTER DELETE
ON data_transfer_process
BEGIN
   INSERT INTO data_transfer_process_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,fk_data_transfer_type_id, fk_data_transfer_type_uuid,location,source_internal_object_id,fk_deleted_status_id, fk_deleted_status_uuid) VALUES ('DELETE',old.id,old.uuid,old.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=old.fk_object_type_id),old.fk_project_id, (SELECT uuid FROM project WHERE id=old.fk_project_id),old.name,old.description,old.fk_data_transfer_type_id, (SELECT uuid FROM data_transfer_type WHERE id=old.fk_data_transfer_type_id),old.location,old.source_internal_object_id,old.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=old.fk_deleted_status_id));

   INSERT INTO cleanup_queue (ref_fk_object_id, ref_fk_object_type_id) VALUES (old.id, old.fk_object_type_id);
END;
		]]>
		</sql>


		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_contact_group_log_INSERT;
		]]>
		</sql>
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_contact_group_log_INSERT AFTER INSERT
ON contact_group
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   INSERT INTO contact_group_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_client_id, fk_client_uuid,name,description,short_name,fk_deleted_status_id, fk_deleted_status_uuid) VALUES ('INSERT',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.fk_client_id, (SELECT uuid FROM client WHERE id=new.fk_client_id),new.name,new.description,new.short_name,new.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=new.fk_deleted_status_id));
   UPDATE contact_group SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   DELETE FROM _newUUID;
   DELETE FROM contact_group_log WHERE log_id=(SELECT MAX(log_id)+1 FROM contact_group_log WHERE log_action='INSERT' AND id=new.id) AND log_action='UPDATE' AND id=new.id; --Aufraeumen des ungewollten Datensatz beim INSERT (erzeugt durch den UPDATE TRIGGER)
END;
		]]>
		</sql>

		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_contact_group_log_UPDATE;
		]]>
		</sql>
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_contact_group_log_UPDATE AFTER UPDATE
ON contact_group
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   UPDATE contact_group SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   INSERT INTO contact_group_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_client_id, fk_client_uuid,name,description,short_name,fk_deleted_status_id, fk_deleted_status_uuid) VALUES ('UPDATE',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.fk_client_id, (SELECT uuid FROM client WHERE id=new.fk_client_id),new.name,new.description,new.short_name,new.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=new.fk_deleted_status_id));
   DELETE FROM _newUUID;
END;
		]]>
		</sql>

		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_contact_group_log_DELETE;
		]]>
		</sql>
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_contact_group_log_DELETE AFTER DELETE
ON contact_group
BEGIN
   INSERT INTO contact_group_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_client_id, fk_client_uuid,name,description,short_name,fk_deleted_status_id, fk_deleted_status_uuid) VALUES ('DELETE',old.id,old.uuid,old.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=old.fk_object_type_id),old.fk_client_id, (SELECT uuid FROM client WHERE id=old.fk_client_id),old.name,old.description,old.short_name,old.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=old.fk_deleted_status_id));

   INSERT INTO cleanup_queue (ref_fk_object_id, ref_fk_object_type_id) VALUES (old.id, old.fk_object_type_id);
END;
		]]>
		</sql>



		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_contact_log_INSERT;
		]]>
		</sql>
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_contact_log_INSERT AFTER INSERT
ON contact
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   INSERT INTO contact_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_contact_group_id, fk_contact_group_uuid,fk_client_id, fk_client_uuid,givenname,surname,email,phone,mobile,ldap_cn,description,fk_deleted_status_id, fk_deleted_status_uuid) VALUES ('INSERT',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.fk_contact_group_id, (SELECT uuid FROM contact_group WHERE id=new.fk_contact_group_id),new.fk_client_id, (SELECT uuid FROM client WHERE id=new.fk_client_id),new.givenname,new.surname,new.email,new.phone,new.mobile,new.ldap_cn,new.description,new.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=new.fk_deleted_status_id));
   UPDATE contact SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   DELETE FROM _newUUID;
   DELETE FROM contact_log WHERE log_id=(SELECT MAX(log_id)+1 FROM contact_log WHERE log_action='INSERT' AND id=new.id) AND log_action='UPDATE' AND id=new.id; --Aufraeumen des ungewollten Datensatz beim INSERT (erzeugt durch den UPDATE TRIGGER)
END;
		]]>
		</sql>

		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_contact_log_UPDATE;
		]]>
		</sql>
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_contact_log_UPDATE AFTER UPDATE
ON contact
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   UPDATE contact SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   INSERT INTO contact_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_contact_group_id, fk_contact_group_uuid,fk_client_id, fk_client_uuid,givenname,surname,email,phone,mobile,ldap_cn,description,fk_deleted_status_id, fk_deleted_status_uuid) VALUES ('UPDATE',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.fk_contact_group_id, (SELECT uuid FROM contact_group WHERE id=new.fk_contact_group_id),new.fk_client_id, (SELECT uuid FROM client WHERE id=new.fk_client_id),new.givenname,new.surname,new.email,new.phone,new.mobile,new.ldap_cn,new.description,new.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=new.fk_deleted_status_id));
   DELETE FROM _newUUID;
END;
		]]>
		</sql>

		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_contact_log_DELETE;
		]]>
		</sql>
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_contact_log_DELETE AFTER DELETE
ON contact
BEGIN
   INSERT INTO contact_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_contact_group_id, fk_contact_group_uuid,fk_client_id, fk_client_uuid,givenname,surname,email,phone,mobile,ldap_cn,description,fk_deleted_status_id, fk_deleted_status_uuid) VALUES ('DELETE',old.id,old.uuid,old.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=old.fk_object_type_id),old.fk_contact_group_id, (SELECT uuid FROM contact_group WHERE id=old.fk_contact_group_id),old.fk_client_id, (SELECT uuid FROM client WHERE id=old.fk_client_id),old.givenname,old.surname,old.email,old.phone,old.mobile,old.ldap_cn,old.description,old.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=old.fk_deleted_status_id));

   INSERT INTO cleanup_queue (ref_fk_object_id, ref_fk_object_type_id) VALUES (old.id, old.fk_object_type_id);
END;
		]]>
		</sql>

		
		<comment>
		<![CDATA[
		New column "fk_deleted_status_id" for log tables
		Used objects:
			keyfigure_log
			sourcesystem_log
			data_delivery_object_log
			db_table_log
			db_table_field_log
			parameter_log
			scheduling_log
			db_database_log
			data_transfer_process_log
			contact_group_log
			contact_log
		Phabricator tasks:
			T28
		]]>
		</comment>
</changeSet>
</databaseChangeLog>
