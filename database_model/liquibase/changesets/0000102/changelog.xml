<?xml version="1.0" encoding="UTF-8"?>

	<databaseChangeLog
    xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext"
    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd
    http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd"
	
	logicalFilePath="000102/changelog.xml">

	<changeSet author="patrick_schmitz" id="000102" context="">
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TABLE object_persistence_method_log (
   log_id INTEGER NOT NULL  DEFAULT NULL PRIMARY KEY AUTOINCREMENT,
   log_datetime TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
   log_action TEXT,
   id INTEGER,
   uuid TEXT,
   fk_object_type_id INTEGER,
   fk_object_type_uuid TEXT,
   name TEXT(250),
   description TEXT(4000)
);
		]]>		
		</sql>

		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_object_persistence_method_log_INSERT;
		]]>		
		</sql>

		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_object_persistence_method_log_INSERT AFTER INSERT
ON object_persistence_method
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   INSERT INTO object_persistence_method_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,name,description) VALUES ('INSERT',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.name,new.description);
   UPDATE object_persistence_method SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   DELETE FROM _newUUID;
   DELETE FROM object_persistence_method_log WHERE log_id=(SELECT MAX(log_id)+1 FROM object_persistence_method_log WHERE log_action='INSERT' AND id=new.id) AND log_action='UPDATE' AND id=new.id; --Aufraeumen des ungewollten Datensatz beim INSERT (erzeugt durch den UPDATE TRIGGER)
END;
		]]>		
		</sql>

		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_object_persistence_method_log_UPDATE;
		]]>		
		</sql>

		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_object_persistence_method_log_UPDATE AFTER UPDATE
ON object_persistence_method
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   UPDATE object_persistence_method SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   INSERT INTO object_persistence_method_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,name,description) VALUES ('UPDATE',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.name,new.description);
   DELETE FROM _newUUID;
END;
		]]>		
		</sql>

		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_object_persistence_method_log_DELETE;
		]]>		
		</sql>

		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_object_persistence_method_log_DELETE AFTER DELETE
ON object_persistence_method
BEGIN
   INSERT INTO object_persistence_method_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,name,description) VALUES ('DELETE',old.id,old.uuid,old.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=old.fk_object_type_id),old.name,old.description);

   INSERT INTO cleanup_queue (ref_fk_object_id, ref_fk_object_type_id) VALUES (old.id, old.fk_object_type_id);
END;
		]]>		
		</sql>

		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TABLE datamanagement_process_log (
   log_id INTEGER NOT NULL  DEFAULT NULL PRIMARY KEY AUTOINCREMENT,
   log_datetime TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
   log_action TEXT,
   id INTEGER,
   uuid TEXT,
   fk_object_type_id INTEGER,
   fk_object_type_uuid TEXT,
   name TEXT(250),
   description TEXT(4000),
   tool TEXT(500),
   tool_version TEXT(250),
   routine TEXT(500)
);
		]]>		
		</sql>

		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_datamanagement_process_log_INSERT;
		]]>		
		</sql>

		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_datamanagement_process_log_INSERT AFTER INSERT
ON datamanagement_process
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   INSERT INTO datamanagement_process_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,name,description,tool,tool_version,routine) VALUES ('INSERT',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.name,new.description,new.tool,new.tool_version,new.routine);
   UPDATE datamanagement_process SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   DELETE FROM _newUUID;
   DELETE FROM datamanagement_process_log WHERE log_id=(SELECT MAX(log_id)+1 FROM datamanagement_process_log WHERE log_action='INSERT' AND id=new.id) AND log_action='UPDATE' AND id=new.id; --Aufraeumen des ungewollten Datensatz beim INSERT (erzeugt durch den UPDATE TRIGGER)
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_datamanagement_process_log_UPDATE;
		]]>		
		</sql>

		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_datamanagement_process_log_UPDATE AFTER UPDATE
ON datamanagement_process
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   UPDATE datamanagement_process SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   INSERT INTO datamanagement_process_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,name,description,tool,tool_version,routine) VALUES ('UPDATE',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.name,new.description,new.tool,new.tool_version,new.routine);
   DELETE FROM _newUUID;
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_datamanagement_process_log_DELETE;
		]]>		
		</sql>

		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_datamanagement_process_log_DELETE AFTER DELETE
ON datamanagement_process
BEGIN
   INSERT INTO datamanagement_process_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,name,description,tool,tool_version,routine) VALUES ('DELETE',old.id,old.uuid,old.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=old.fk_object_type_id),old.name,old.description,old.tool,old.tool_version,old.routine);

   INSERT INTO cleanup_queue (ref_fk_object_id, ref_fk_object_type_id) VALUES (old.id, old.fk_object_type_id);
END;
		]]>		
		</sql>

		<comment>
		<![CDATA[
		Register new object_type for object_persistence_method and datamanagement_process.
		Used objects:
            object_persistence_method_log
            datamanagement_process_log
            TRIG_object_persistence_method_log_INSERT
            TRIG_object_persistence_method_log_UPDATE
            TRIG_object_persistence_method_log_DELETE
            TRIG_datamanagement_process_log_INSERT
            TRIG_datamanagement_process_log_UPDATE
            TRIG_datamanagement_process_log_DELETE
		Phabricator tasks:
			T159
		]]>
		</comment>
</changeSet>
</databaseChangeLog>
