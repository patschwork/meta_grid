<?xml version="1.0" encoding="UTF-8"?>

	<databaseChangeLog
    xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext"
    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd
    http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd"
	
	logicalFilePath="000106/changelog.xml">

	<changeSet author="patrick_schmitz" id="000106" context="">
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_keyfigure_log_INSERT;
		]]>		
		</sql>

		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_keyfigure_log_INSERT AFTER INSERT
ON keyfigure
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   INSERT INTO keyfigure_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,formula,aggregation,character,type,unit,value_range,cumulation_possible,fk_deleted_status_id, fk_deleted_status_uuid,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid,source_definition,source_definition_language,source_comment) VALUES ('INSERT',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.fk_project_id, (SELECT uuid FROM project WHERE id=new.fk_project_id),new.name,new.description,new.formula,new.aggregation,new.character,new.type,new.unit,new.value_range,new.cumulation_possible,new.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=new.fk_deleted_status_id),new.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=new.fk_object_persistence_method_id),new.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=new.fk_datamanagement_process_id),new.source_definition,new.source_definition_language,new.source_comment);
   UPDATE keyfigure SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   DELETE FROM _newUUID;
   DELETE FROM keyfigure_log WHERE log_id=(SELECT MAX(log_id)+1 FROM keyfigure_log WHERE log_action='INSERT' AND id=new.id) AND log_action='UPDATE' AND id=new.id; --Aufraeumen des ungewollten Datensatz beim INSERT (erzeugt durch den UPDATE TRIGGER)
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_keyfigure_log_UPDATE;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_keyfigure_log_UPDATE AFTER UPDATE
ON keyfigure
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   UPDATE keyfigure SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   INSERT INTO keyfigure_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,formula,aggregation,character,type,unit,value_range,cumulation_possible,fk_deleted_status_id, fk_deleted_status_uuid,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid,source_definition,source_definition_language,source_comment) VALUES ('UPDATE',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.fk_project_id, (SELECT uuid FROM project WHERE id=new.fk_project_id),new.name,new.description,new.formula,new.aggregation,new.character,new.type,new.unit,new.value_range,new.cumulation_possible,new.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=new.fk_deleted_status_id),new.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=new.fk_object_persistence_method_id),new.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=new.fk_datamanagement_process_id),new.source_definition,new.source_definition_language,new.source_comment);
   DELETE FROM _newUUID;
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_keyfigure_log_DELETE;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_keyfigure_log_DELETE AFTER DELETE
ON keyfigure
BEGIN
   INSERT INTO keyfigure_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,formula,aggregation,character,type,unit,value_range,cumulation_possible,fk_deleted_status_id, fk_deleted_status_uuid,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid,source_definition,source_definition_language,source_comment) VALUES ('DELETE',old.id,old.uuid,old.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=old.fk_object_type_id),old.fk_project_id, (SELECT uuid FROM project WHERE id=old.fk_project_id),old.name,old.description,old.formula,old.aggregation,old.character,old.type,old.unit,old.value_range,old.cumulation_possible,old.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=old.fk_deleted_status_id),old.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=old.fk_object_persistence_method_id),old.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=old.fk_datamanagement_process_id),old.source_definition,old.source_definition_language,old.source_comment);

   INSERT INTO cleanup_queue (ref_fk_object_id, ref_fk_object_type_id) VALUES (old.id, old.fk_object_type_id);
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_client_log_INSERT;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_client_log_INSERT AFTER INSERT
ON client
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   INSERT INTO client_log (log_action, id,uuid,name,description,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid) VALUES ('INSERT',new.id,(SELECT uuid FROM _newUUID),new.name,new.description,new.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=new.fk_object_persistence_method_id),new.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=new.fk_datamanagement_process_id));
   UPDATE client SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   DELETE FROM _newUUID;
   DELETE FROM client_log WHERE log_id=(SELECT MAX(log_id)+1 FROM client_log WHERE log_action='INSERT' AND id=new.id) AND log_action='UPDATE' AND id=new.id; --Aufraeumen des ungewollten Datensatz beim INSERT (erzeugt durch den UPDATE TRIGGER)
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_client_log_UPDATE;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_client_log_UPDATE AFTER UPDATE
ON client
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   UPDATE client SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   INSERT INTO client_log (log_action, id,uuid,name,description,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid) VALUES ('UPDATE',new.id,(SELECT uuid FROM _newUUID),new.name,new.description,new.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=new.fk_object_persistence_method_id),new.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=new.fk_datamanagement_process_id));
   DELETE FROM _newUUID;
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_client_log_DELETE;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_client_log_DELETE AFTER DELETE
ON client
BEGIN
   INSERT INTO client_log (log_action, id,uuid,name,description,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid) VALUES ('DELETE',old.id,old.uuid,old.name,old.description,old.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=old.fk_object_persistence_method_id),old.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=old.fk_datamanagement_process_id));
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_project_log_INSERT;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_project_log_INSERT AFTER INSERT
ON project
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   INSERT INTO project_log (log_action, id,uuid,fk_client_id, fk_client_uuid,name,description,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid) VALUES ('INSERT',new.id,(SELECT uuid FROM _newUUID),new.fk_client_id, (SELECT uuid FROM client WHERE id=new.fk_client_id),new.name,new.description,new.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=new.fk_object_persistence_method_id),new.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=new.fk_datamanagement_process_id));
   UPDATE project SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   DELETE FROM _newUUID;
   DELETE FROM project_log WHERE log_id=(SELECT MAX(log_id)+1 FROM project_log WHERE log_action='INSERT' AND id=new.id) AND log_action='UPDATE' AND id=new.id; --Aufraeumen des ungewollten Datensatz beim INSERT (erzeugt durch den UPDATE TRIGGER)
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_project_log_UPDATE;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_project_log_UPDATE AFTER UPDATE
ON project
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   UPDATE project SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   INSERT INTO project_log (log_action, id,uuid,fk_client_id, fk_client_uuid,name,description,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid) VALUES ('UPDATE',new.id,(SELECT uuid FROM _newUUID),new.fk_client_id, (SELECT uuid FROM client WHERE id=new.fk_client_id),new.name,new.description,new.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=new.fk_object_persistence_method_id),new.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=new.fk_datamanagement_process_id));
   DELETE FROM _newUUID;
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_project_log_DELETE;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_project_log_DELETE AFTER DELETE
ON project
BEGIN
   INSERT INTO project_log (log_action, id,uuid,fk_client_id, fk_client_uuid,name,description,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid) VALUES ('DELETE',old.id,old.uuid,old.fk_client_id, (SELECT uuid FROM client WHERE id=old.fk_client_id),old.name,old.description,old.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=old.fk_object_persistence_method_id),old.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=old.fk_datamanagement_process_id));
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_sourcesystem_log_INSERT;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_sourcesystem_log_INSERT AFTER INSERT
ON sourcesystem
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   INSERT INTO sourcesystem_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,fk_contact_group_id_as_supporter, fk_contact_group_uuid_as_supporter,fk_deleted_status_id, fk_deleted_status_uuid,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid) VALUES ('INSERT',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.fk_project_id, (SELECT uuid FROM project WHERE id=new.fk_project_id),new.name,new.description,new.fk_contact_group_id_as_supporter, (SELECT uuid FROM contact_group WHERE id=new.fk_contact_group_id_as_supporter),new.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=new.fk_deleted_status_id),new.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=new.fk_object_persistence_method_id),new.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=new.fk_datamanagement_process_id));
   UPDATE sourcesystem SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   DELETE FROM _newUUID;
   DELETE FROM sourcesystem_log WHERE log_id=(SELECT MAX(log_id)+1 FROM sourcesystem_log WHERE log_action='INSERT' AND id=new.id) AND log_action='UPDATE' AND id=new.id; --Aufraeumen des ungewollten Datensatz beim INSERT (erzeugt durch den UPDATE TRIGGER)
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_sourcesystem_log_UPDATE;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_sourcesystem_log_UPDATE AFTER UPDATE
ON sourcesystem
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   UPDATE sourcesystem SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   INSERT INTO sourcesystem_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,fk_contact_group_id_as_supporter, fk_contact_group_uuid_as_supporter,fk_deleted_status_id, fk_deleted_status_uuid,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid) VALUES ('UPDATE',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.fk_project_id, (SELECT uuid FROM project WHERE id=new.fk_project_id),new.name,new.description,new.fk_contact_group_id_as_supporter, (SELECT uuid FROM contact_group WHERE id=new.fk_contact_group_id_as_supporter),new.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=new.fk_deleted_status_id),new.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=new.fk_object_persistence_method_id),new.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=new.fk_datamanagement_process_id));
   DELETE FROM _newUUID;
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_sourcesystem_log_DELETE;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_sourcesystem_log_DELETE AFTER DELETE
ON sourcesystem
BEGIN
   INSERT INTO sourcesystem_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,fk_contact_group_id_as_supporter, fk_contact_group_uuid_as_supporter,fk_deleted_status_id, fk_deleted_status_uuid,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid) VALUES ('DELETE',old.id,old.uuid,old.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=old.fk_object_type_id),old.fk_project_id, (SELECT uuid FROM project WHERE id=old.fk_project_id),old.name,old.description,old.fk_contact_group_id_as_supporter, (SELECT uuid FROM contact_group WHERE id=old.fk_contact_group_id_as_supporter),old.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=old.fk_deleted_status_id),old.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=old.fk_object_persistence_method_id),old.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=old.fk_datamanagement_process_id));

   INSERT INTO cleanup_queue (ref_fk_object_id, ref_fk_object_type_id) VALUES (old.id, old.fk_object_type_id);
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_data_delivery_object_log_INSERT;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_data_delivery_object_log_INSERT AFTER INSERT
ON data_delivery_object
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   INSERT INTO data_delivery_object_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,fk_tool_id, fk_tool_uuid,fk_data_delivery_type_id, fk_data_delivery_type_uuid,fk_contact_group_id_as_data_owner, fk_contact_group_uuid_as_data_owner,fk_deleted_status_id, fk_deleted_status_uuid,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid,source_definition,source_comment) VALUES ('INSERT',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.fk_project_id, (SELECT uuid FROM project WHERE id=new.fk_project_id),new.name,new.description,new.fk_tool_id, (SELECT uuid FROM tool WHERE id=new.fk_tool_id),new.fk_data_delivery_type_id, (SELECT uuid FROM data_delivery_type WHERE id=new.fk_data_delivery_type_id),new.fk_contact_group_id_as_data_owner, (SELECT uuid FROM contact_group WHERE id=new.fk_contact_group_id_as_data_owner),new.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=new.fk_deleted_status_id),new.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=new.fk_object_persistence_method_id),new.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=new.fk_datamanagement_process_id),new.source_definition,new.source_comment);
   UPDATE data_delivery_object SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   DELETE FROM _newUUID;
   DELETE FROM data_delivery_object_log WHERE log_id=(SELECT MAX(log_id)+1 FROM data_delivery_object_log WHERE log_action='INSERT' AND id=new.id) AND log_action='UPDATE' AND id=new.id; --Aufraeumen des ungewollten Datensatz beim INSERT (erzeugt durch den UPDATE TRIGGER)
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_data_delivery_object_log_UPDATE;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_data_delivery_object_log_UPDATE AFTER UPDATE
ON data_delivery_object
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   UPDATE data_delivery_object SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   INSERT INTO data_delivery_object_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,fk_tool_id, fk_tool_uuid,fk_data_delivery_type_id, fk_data_delivery_type_uuid,fk_contact_group_id_as_data_owner, fk_contact_group_uuid_as_data_owner,fk_deleted_status_id, fk_deleted_status_uuid,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid,source_definition,source_comment) VALUES ('UPDATE',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.fk_project_id, (SELECT uuid FROM project WHERE id=new.fk_project_id),new.name,new.description,new.fk_tool_id, (SELECT uuid FROM tool WHERE id=new.fk_tool_id),new.fk_data_delivery_type_id, (SELECT uuid FROM data_delivery_type WHERE id=new.fk_data_delivery_type_id),new.fk_contact_group_id_as_data_owner, (SELECT uuid FROM contact_group WHERE id=new.fk_contact_group_id_as_data_owner),new.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=new.fk_deleted_status_id),new.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=new.fk_object_persistence_method_id),new.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=new.fk_datamanagement_process_id),new.source_definition,new.source_comment);
   DELETE FROM _newUUID;
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_data_delivery_object_log_DELETE;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_data_delivery_object_log_DELETE AFTER DELETE
ON data_delivery_object
BEGIN
   INSERT INTO data_delivery_object_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,fk_tool_id, fk_tool_uuid,fk_data_delivery_type_id, fk_data_delivery_type_uuid,fk_contact_group_id_as_data_owner, fk_contact_group_uuid_as_data_owner,fk_deleted_status_id, fk_deleted_status_uuid,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid,source_definition,source_comment) VALUES ('DELETE',old.id,old.uuid,old.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=old.fk_object_type_id),old.fk_project_id, (SELECT uuid FROM project WHERE id=old.fk_project_id),old.name,old.description,old.fk_tool_id, (SELECT uuid FROM tool WHERE id=old.fk_tool_id),old.fk_data_delivery_type_id, (SELECT uuid FROM data_delivery_type WHERE id=old.fk_data_delivery_type_id),old.fk_contact_group_id_as_data_owner, (SELECT uuid FROM contact_group WHERE id=old.fk_contact_group_id_as_data_owner),old.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=old.fk_deleted_status_id),old.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=old.fk_object_persistence_method_id),old.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=old.fk_datamanagement_process_id),old.source_definition,old.source_comment);

   INSERT INTO cleanup_queue (ref_fk_object_id, ref_fk_object_type_id) VALUES (old.id, old.fk_object_type_id);
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_map_object_2_object_log_INSERT;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_map_object_2_object_log_INSERT AFTER INSERT
ON map_object_2_object
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   INSERT INTO map_object_2_object_log (log_action, id,uuid,fk_mapping_qualifier_id, fk_mapping_qualifier_uuid,ref_fk_object_id_1,ref_fk_object_type_id_1,ref_fk_object_id_2,ref_fk_object_type_id_2,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid) VALUES ('INSERT',new.id,(SELECT uuid FROM _newUUID),new.fk_mapping_qualifier_id, (SELECT uuid FROM mapping_qualifier WHERE id=new.fk_mapping_qualifier_id),new.ref_fk_object_id_1,new.ref_fk_object_type_id_1,new.ref_fk_object_id_2,new.ref_fk_object_type_id_2,new.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=new.fk_object_persistence_method_id),new.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=new.fk_datamanagement_process_id));
   UPDATE map_object_2_object SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   DELETE FROM _newUUID;
   DELETE FROM map_object_2_object_log WHERE log_id=(SELECT MAX(log_id)+1 FROM map_object_2_object_log WHERE log_action='INSERT' AND id=new.id) AND log_action='UPDATE' AND id=new.id; --Aufraeumen des ungewollten Datensatz beim INSERT (erzeugt durch den UPDATE TRIGGER)
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_map_object_2_object_log_UPDATE;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_map_object_2_object_log_UPDATE AFTER UPDATE
ON map_object_2_object
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   UPDATE map_object_2_object SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   INSERT INTO map_object_2_object_log (log_action, id,uuid,fk_mapping_qualifier_id, fk_mapping_qualifier_uuid,ref_fk_object_id_1,ref_fk_object_type_id_1,ref_fk_object_id_2,ref_fk_object_type_id_2,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid) VALUES ('UPDATE',new.id,(SELECT uuid FROM _newUUID),new.fk_mapping_qualifier_id, (SELECT uuid FROM mapping_qualifier WHERE id=new.fk_mapping_qualifier_id),new.ref_fk_object_id_1,new.ref_fk_object_type_id_1,new.ref_fk_object_id_2,new.ref_fk_object_type_id_2,new.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=new.fk_object_persistence_method_id),new.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=new.fk_datamanagement_process_id));
   DELETE FROM _newUUID;
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_map_object_2_object_log_DELETE;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_map_object_2_object_log_DELETE AFTER DELETE
ON map_object_2_object
BEGIN
   INSERT INTO map_object_2_object_log (log_action, id,uuid,fk_mapping_qualifier_id, fk_mapping_qualifier_uuid,ref_fk_object_id_1,ref_fk_object_type_id_1,ref_fk_object_id_2,ref_fk_object_type_id_2,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid) VALUES ('DELETE',old.id,old.uuid,old.fk_mapping_qualifier_id, (SELECT uuid FROM mapping_qualifier WHERE id=old.fk_mapping_qualifier_id),old.ref_fk_object_id_1,old.ref_fk_object_type_id_1,old.ref_fk_object_id_2,old.ref_fk_object_type_id_2,old.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=old.fk_object_persistence_method_id),old.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=old.fk_datamanagement_process_id));
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_tool_log_INSERT;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_tool_log_INSERT AFTER INSERT
ON tool
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   INSERT INTO tool_log (log_action, id,uuid,fk_tool_type_id, fk_tool_type_uuid,tool_name,vendor,version,comment,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid) VALUES ('INSERT',new.id,(SELECT uuid FROM _newUUID),new.fk_tool_type_id, (SELECT uuid FROM tool_type WHERE id=new.fk_tool_type_id),new.tool_name,new.vendor,new.version,new.comment,new.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=new.fk_object_persistence_method_id),new.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=new.fk_datamanagement_process_id));
   UPDATE tool SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   DELETE FROM _newUUID;
   DELETE FROM tool_log WHERE log_id=(SELECT MAX(log_id)+1 FROM tool_log WHERE log_action='INSERT' AND id=new.id) AND log_action='UPDATE' AND id=new.id; --Aufraeumen des ungewollten Datensatz beim INSERT (erzeugt durch den UPDATE TRIGGER)
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_tool_log_UPDATE;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_tool_log_UPDATE AFTER UPDATE
ON tool
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   UPDATE tool SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   INSERT INTO tool_log (log_action, id,uuid,fk_tool_type_id, fk_tool_type_uuid,tool_name,vendor,version,comment,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid) VALUES ('UPDATE',new.id,(SELECT uuid FROM _newUUID),new.fk_tool_type_id, (SELECT uuid FROM tool_type WHERE id=new.fk_tool_type_id),new.tool_name,new.vendor,new.version,new.comment,new.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=new.fk_object_persistence_method_id),new.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=new.fk_datamanagement_process_id));
   DELETE FROM _newUUID;
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_tool_log_DELETE;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_tool_log_DELETE AFTER DELETE
ON tool
BEGIN
   INSERT INTO tool_log (log_action, id,uuid,fk_tool_type_id, fk_tool_type_uuid,tool_name,vendor,version,comment,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid) VALUES ('DELETE',old.id,old.uuid,old.fk_tool_type_id, (SELECT uuid FROM tool_type WHERE id=old.fk_tool_type_id),old.tool_name,old.vendor,old.version,old.comment,old.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=old.fk_object_persistence_method_id),old.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=old.fk_datamanagement_process_id));
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_object_depends_on_log_INSERT;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_object_depends_on_log_INSERT AFTER INSERT
ON object_depends_on
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   INSERT INTO object_depends_on_log (log_action, id,uuid,ref_fk_object_id_parent,ref_fk_object_type_id_parent,ref_fk_object_id_child,ref_fk_object_type_id_child,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid) VALUES ('INSERT',new.id,(SELECT uuid FROM _newUUID),new.ref_fk_object_id_parent,new.ref_fk_object_type_id_parent,new.ref_fk_object_id_child,new.ref_fk_object_type_id_child,new.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=new.fk_object_persistence_method_id),new.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=new.fk_datamanagement_process_id));
   UPDATE object_depends_on SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   DELETE FROM _newUUID;
   DELETE FROM object_depends_on_log WHERE log_id=(SELECT MAX(log_id)+1 FROM object_depends_on_log WHERE log_action='INSERT' AND id=new.id) AND log_action='UPDATE' AND id=new.id; --Aufraeumen des ungewollten Datensatz beim INSERT (erzeugt durch den UPDATE TRIGGER)
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_object_depends_on_log_UPDATE;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_object_depends_on_log_UPDATE AFTER UPDATE
ON object_depends_on
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   UPDATE object_depends_on SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   INSERT INTO object_depends_on_log (log_action, id,uuid,ref_fk_object_id_parent,ref_fk_object_type_id_parent,ref_fk_object_id_child,ref_fk_object_type_id_child,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid) VALUES ('UPDATE',new.id,(SELECT uuid FROM _newUUID),new.ref_fk_object_id_parent,new.ref_fk_object_type_id_parent,new.ref_fk_object_id_child,new.ref_fk_object_type_id_child,new.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=new.fk_object_persistence_method_id),new.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=new.fk_datamanagement_process_id));
   DELETE FROM _newUUID;
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_object_depends_on_log_DELETE;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_object_depends_on_log_DELETE AFTER DELETE
ON object_depends_on
BEGIN
   INSERT INTO object_depends_on_log (log_action, id,uuid,ref_fk_object_id_parent,ref_fk_object_type_id_parent,ref_fk_object_id_child,ref_fk_object_type_id_child,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid) VALUES ('DELETE',old.id,old.uuid,old.ref_fk_object_id_parent,old.ref_fk_object_type_id_parent,old.ref_fk_object_id_child,old.ref_fk_object_type_id_child,old.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=old.fk_object_persistence_method_id),old.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=old.fk_datamanagement_process_id));
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_attribute_log_INSERT;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_attribute_log_INSERT AFTER INSERT
ON attribute
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   INSERT INTO attribute_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,formula,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid) VALUES ('INSERT',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.fk_project_id, (SELECT uuid FROM project WHERE id=new.fk_project_id),new.name,new.description,new.formula,new.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=new.fk_object_persistence_method_id),new.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=new.fk_datamanagement_process_id));
   UPDATE attribute SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   DELETE FROM _newUUID;
   DELETE FROM attribute_log WHERE log_id=(SELECT MAX(log_id)+1 FROM attribute_log WHERE log_action='INSERT' AND id=new.id) AND log_action='UPDATE' AND id=new.id; --Aufraeumen des ungewollten Datensatz beim INSERT (erzeugt durch den UPDATE TRIGGER)
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_attribute_log_UPDATE;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_attribute_log_UPDATE AFTER UPDATE
ON attribute
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   UPDATE attribute SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   INSERT INTO attribute_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,formula,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid) VALUES ('UPDATE',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.fk_project_id, (SELECT uuid FROM project WHERE id=new.fk_project_id),new.name,new.description,new.formula,new.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=new.fk_object_persistence_method_id),new.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=new.fk_datamanagement_process_id));
   DELETE FROM _newUUID;
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_attribute_log_DELETE;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_attribute_log_DELETE AFTER DELETE
ON attribute
BEGIN
   INSERT INTO attribute_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,formula,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid) VALUES ('DELETE',old.id,old.uuid,old.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=old.fk_object_type_id),old.fk_project_id, (SELECT uuid FROM project WHERE id=old.fk_project_id),old.name,old.description,old.formula,old.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=old.fk_object_persistence_method_id),old.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=old.fk_datamanagement_process_id));

   INSERT INTO cleanup_queue (ref_fk_object_id, ref_fk_object_type_id) VALUES (old.id, old.fk_object_type_id);
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_tool_type_log_INSERT;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_tool_type_log_INSERT AFTER INSERT
ON tool_type
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   INSERT INTO tool_type_log (log_action, id,uuid,name,description,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid) VALUES ('INSERT',new.id,(SELECT uuid FROM _newUUID),new.name,new.description,new.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=new.fk_object_persistence_method_id),new.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=new.fk_datamanagement_process_id));
   UPDATE tool_type SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   DELETE FROM _newUUID;
   DELETE FROM tool_type_log WHERE log_id=(SELECT MAX(log_id)+1 FROM tool_type_log WHERE log_action='INSERT' AND id=new.id) AND log_action='UPDATE' AND id=new.id; --Aufraeumen des ungewollten Datensatz beim INSERT (erzeugt durch den UPDATE TRIGGER)
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_tool_type_log_UPDATE;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_tool_type_log_UPDATE AFTER UPDATE
ON tool_type
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   UPDATE tool_type SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   INSERT INTO tool_type_log (log_action, id,uuid,name,description,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid) VALUES ('UPDATE',new.id,(SELECT uuid FROM _newUUID),new.name,new.description,new.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=new.fk_object_persistence_method_id),new.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=new.fk_datamanagement_process_id));
   DELETE FROM _newUUID;
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_tool_type_log_DELETE;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_tool_type_log_DELETE AFTER DELETE
ON tool_type
BEGIN
   INSERT INTO tool_type_log (log_action, id,uuid,name,description,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid) VALUES ('DELETE',old.id,old.uuid,old.name,old.description,old.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=old.fk_object_persistence_method_id),old.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=old.fk_datamanagement_process_id));
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_db_table_log_INSERT;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_db_table_log_INSERT AFTER INSERT
ON db_table
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   INSERT INTO db_table_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,location,fk_db_table_context_id, fk_db_table_context_uuid,fk_db_table_type_id, fk_db_table_type_uuid,fk_deleted_status_id, fk_deleted_status_uuid,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid,source_definition,source_comment) VALUES ('INSERT',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.fk_project_id, (SELECT uuid FROM project WHERE id=new.fk_project_id),new.name,new.description,new.location,new.fk_db_table_context_id, (SELECT uuid FROM db_table_context WHERE id=new.fk_db_table_context_id),new.fk_db_table_type_id, (SELECT uuid FROM db_table_type WHERE id=new.fk_db_table_type_id),new.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=new.fk_deleted_status_id),new.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=new.fk_object_persistence_method_id),new.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=new.fk_datamanagement_process_id),new.source_definition,new.source_comment);
   UPDATE db_table SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   DELETE FROM _newUUID;
   DELETE FROM db_table_log WHERE log_id=(SELECT MAX(log_id)+1 FROM db_table_log WHERE log_action='INSERT' AND id=new.id) AND log_action='UPDATE' AND id=new.id; --Aufraeumen des ungewollten Datensatz beim INSERT (erzeugt durch den UPDATE TRIGGER)
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_db_table_log_UPDATE;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_db_table_log_UPDATE AFTER UPDATE
ON db_table
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   UPDATE db_table SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   INSERT INTO db_table_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,location,fk_db_table_context_id, fk_db_table_context_uuid,fk_db_table_type_id, fk_db_table_type_uuid,fk_deleted_status_id, fk_deleted_status_uuid,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid,source_definition,source_comment) VALUES ('UPDATE',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.fk_project_id, (SELECT uuid FROM project WHERE id=new.fk_project_id),new.name,new.description,new.location,new.fk_db_table_context_id, (SELECT uuid FROM db_table_context WHERE id=new.fk_db_table_context_id),new.fk_db_table_type_id, (SELECT uuid FROM db_table_type WHERE id=new.fk_db_table_type_id),new.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=new.fk_deleted_status_id),new.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=new.fk_object_persistence_method_id),new.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=new.fk_datamanagement_process_id),new.source_definition,new.source_comment);
   DELETE FROM _newUUID;
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_db_table_log_DELETE;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_db_table_log_DELETE AFTER DELETE
ON db_table
BEGIN
   INSERT INTO db_table_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,location,fk_db_table_context_id, fk_db_table_context_uuid,fk_db_table_type_id, fk_db_table_type_uuid,fk_deleted_status_id, fk_deleted_status_uuid,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid,source_definition,source_comment) VALUES ('DELETE',old.id,old.uuid,old.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=old.fk_object_type_id),old.fk_project_id, (SELECT uuid FROM project WHERE id=old.fk_project_id),old.name,old.description,old.location,old.fk_db_table_context_id, (SELECT uuid FROM db_table_context WHERE id=old.fk_db_table_context_id),old.fk_db_table_type_id, (SELECT uuid FROM db_table_type WHERE id=old.fk_db_table_type_id),old.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=old.fk_deleted_status_id),old.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=old.fk_object_persistence_method_id),old.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=old.fk_datamanagement_process_id),old.source_definition,old.source_comment);

   INSERT INTO cleanup_queue (ref_fk_object_id, ref_fk_object_type_id) VALUES (old.id, old.fk_object_type_id);
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_db_table_field_log_INSERT;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_db_table_field_log_INSERT AFTER INSERT
ON db_table_field
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   INSERT INTO db_table_field_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,fk_db_table_id, fk_db_table_uuid,datatype,bulk_load_checksum,fk_deleted_status_id, fk_deleted_status_uuid,is_PrimaryKey,is_BusinessKey,is_GDPR_relevant,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid,source_definition,source_comment) VALUES ('INSERT',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.fk_project_id, (SELECT uuid FROM project WHERE id=new.fk_project_id),new.name,new.description,new.fk_db_table_id, (SELECT uuid FROM db_table WHERE id=new.fk_db_table_id),new.datatype,new.bulk_load_checksum,new.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=new.fk_deleted_status_id),new.is_PrimaryKey,new.is_BusinessKey,new.is_GDPR_relevant,new.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=new.fk_object_persistence_method_id),new.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=new.fk_datamanagement_process_id),new.source_definition,new.source_comment);
   UPDATE db_table_field SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   DELETE FROM _newUUID;
   DELETE FROM db_table_field_log WHERE log_id=(SELECT MAX(log_id)+1 FROM db_table_field_log WHERE log_action='INSERT' AND id=new.id) AND log_action='UPDATE' AND id=new.id; --Aufraeumen des ungewollten Datensatz beim INSERT (erzeugt durch den UPDATE TRIGGER)
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_db_table_field_log_UPDATE;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_db_table_field_log_UPDATE AFTER UPDATE
ON db_table_field
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   UPDATE db_table_field SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   INSERT INTO db_table_field_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,fk_db_table_id, fk_db_table_uuid,datatype,bulk_load_checksum,fk_deleted_status_id, fk_deleted_status_uuid,is_PrimaryKey,is_BusinessKey,is_GDPR_relevant,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid,source_definition,source_comment) VALUES ('UPDATE',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.fk_project_id, (SELECT uuid FROM project WHERE id=new.fk_project_id),new.name,new.description,new.fk_db_table_id, (SELECT uuid FROM db_table WHERE id=new.fk_db_table_id),new.datatype,new.bulk_load_checksum,new.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=new.fk_deleted_status_id),new.is_PrimaryKey,new.is_BusinessKey,new.is_GDPR_relevant,new.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=new.fk_object_persistence_method_id),new.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=new.fk_datamanagement_process_id),new.source_definition,new.source_comment);
   DELETE FROM _newUUID;
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_db_table_field_log_DELETE;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_db_table_field_log_DELETE AFTER DELETE
ON db_table_field
BEGIN
   INSERT INTO db_table_field_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,fk_db_table_id, fk_db_table_uuid,datatype,bulk_load_checksum,fk_deleted_status_id, fk_deleted_status_uuid,is_PrimaryKey,is_BusinessKey,is_GDPR_relevant,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid,source_definition,source_comment) VALUES ('DELETE',old.id,old.uuid,old.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=old.fk_object_type_id),old.fk_project_id, (SELECT uuid FROM project WHERE id=old.fk_project_id),old.name,old.description,old.fk_db_table_id, (SELECT uuid FROM db_table WHERE id=old.fk_db_table_id),old.datatype,old.bulk_load_checksum,old.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=old.fk_deleted_status_id),old.is_PrimaryKey,old.is_BusinessKey,old.is_GDPR_relevant,old.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=old.fk_object_persistence_method_id),old.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=old.fk_datamanagement_process_id),old.source_definition,old.source_comment);

   INSERT INTO cleanup_queue (ref_fk_object_id, ref_fk_object_type_id) VALUES (old.id, old.fk_object_type_id);
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_db_table_context_log_INSERT;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_db_table_context_log_INSERT AFTER INSERT
ON db_table_context
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   INSERT INTO db_table_context_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,prefix,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid) VALUES ('INSERT',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.fk_project_id, (SELECT uuid FROM project WHERE id=new.fk_project_id),new.name,new.description,new.prefix,new.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=new.fk_object_persistence_method_id),new.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=new.fk_datamanagement_process_id));
   UPDATE db_table_context SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   DELETE FROM _newUUID;
   DELETE FROM db_table_context_log WHERE log_id=(SELECT MAX(log_id)+1 FROM db_table_context_log WHERE log_action='INSERT' AND id=new.id) AND log_action='UPDATE' AND id=new.id; --Aufraeumen des ungewollten Datensatz beim INSERT (erzeugt durch den UPDATE TRIGGER)
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_db_table_context_log_UPDATE;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_db_table_context_log_UPDATE AFTER UPDATE
ON db_table_context
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   UPDATE db_table_context SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   INSERT INTO db_table_context_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,prefix,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid) VALUES ('UPDATE',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.fk_project_id, (SELECT uuid FROM project WHERE id=new.fk_project_id),new.name,new.description,new.prefix,new.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=new.fk_object_persistence_method_id),new.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=new.fk_datamanagement_process_id));
   DELETE FROM _newUUID;
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_db_table_context_log_DELETE;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_db_table_context_log_DELETE AFTER DELETE
ON db_table_context
BEGIN
   INSERT INTO db_table_context_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,prefix,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid) VALUES ('DELETE',old.id,old.uuid,old.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=old.fk_object_type_id),old.fk_project_id, (SELECT uuid FROM project WHERE id=old.fk_project_id),old.name,old.description,old.prefix,old.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=old.fk_object_persistence_method_id),old.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=old.fk_datamanagement_process_id));

   INSERT INTO cleanup_queue (ref_fk_object_id, ref_fk_object_type_id) VALUES (old.id, old.fk_object_type_id);
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_db_database_log_INSERT;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_db_database_log_INSERT AFTER INSERT
ON db_database
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   INSERT INTO db_database_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,fk_tool_id, fk_tool_uuid,fk_deleted_status_id, fk_deleted_status_uuid,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid,source_definition,source_definition_language,source_comment) VALUES ('INSERT',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.fk_project_id, (SELECT uuid FROM project WHERE id=new.fk_project_id),new.name,new.description,new.fk_tool_id, (SELECT uuid FROM tool WHERE id=new.fk_tool_id),new.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=new.fk_deleted_status_id),new.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=new.fk_object_persistence_method_id),new.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=new.fk_datamanagement_process_id),new.source_definition,new.source_definition_language,new.source_comment);
   UPDATE db_database SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   DELETE FROM _newUUID;
   DELETE FROM db_database_log WHERE log_id=(SELECT MAX(log_id)+1 FROM db_database_log WHERE log_action='INSERT' AND id=new.id) AND log_action='UPDATE' AND id=new.id; --Aufraeumen des ungewollten Datensatz beim INSERT (erzeugt durch den UPDATE TRIGGER)
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_db_database_log_UPDATE;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_db_database_log_UPDATE AFTER UPDATE
ON db_database
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   UPDATE db_database SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   INSERT INTO db_database_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,fk_tool_id, fk_tool_uuid,fk_deleted_status_id, fk_deleted_status_uuid,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid,source_definition,source_definition_language,source_comment) VALUES ('UPDATE',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.fk_project_id, (SELECT uuid FROM project WHERE id=new.fk_project_id),new.name,new.description,new.fk_tool_id, (SELECT uuid FROM tool WHERE id=new.fk_tool_id),new.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=new.fk_deleted_status_id),new.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=new.fk_object_persistence_method_id),new.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=new.fk_datamanagement_process_id),new.source_definition,new.source_definition_language,new.source_comment);
   DELETE FROM _newUUID;
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_db_database_log_DELETE;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_db_database_log_DELETE AFTER DELETE
ON db_database
BEGIN
   INSERT INTO db_database_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,fk_tool_id, fk_tool_uuid,fk_deleted_status_id, fk_deleted_status_uuid,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid,source_definition,source_definition_language,source_comment) VALUES ('DELETE',old.id,old.uuid,old.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=old.fk_object_type_id),old.fk_project_id, (SELECT uuid FROM project WHERE id=old.fk_project_id),old.name,old.description,old.fk_tool_id, (SELECT uuid FROM tool WHERE id=old.fk_tool_id),old.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=old.fk_deleted_status_id),old.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=old.fk_object_persistence_method_id),old.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=old.fk_datamanagement_process_id),old.source_definition,old.source_definition_language,old.source_comment);

   INSERT INTO cleanup_queue (ref_fk_object_id, ref_fk_object_type_id) VALUES (old.id, old.fk_object_type_id);
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_scheduling_log_INSERT;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_scheduling_log_INSERT AFTER INSERT
ON scheduling
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   INSERT INTO scheduling_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,fk_tool_id, fk_tool_uuid,scheduling_series,fk_deleted_status_id, fk_deleted_status_uuid,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid,source_definition,source_definition_language,source_comment) VALUES ('INSERT',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.fk_project_id, (SELECT uuid FROM project WHERE id=new.fk_project_id),new.name,new.description,new.fk_tool_id, (SELECT uuid FROM tool WHERE id=new.fk_tool_id),new.scheduling_series,new.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=new.fk_deleted_status_id),new.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=new.fk_object_persistence_method_id),new.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=new.fk_datamanagement_process_id),new.source_definition,new.source_definition_language,new.source_comment);
   UPDATE scheduling SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   DELETE FROM _newUUID;
   DELETE FROM scheduling_log WHERE log_id=(SELECT MAX(log_id)+1 FROM scheduling_log WHERE log_action='INSERT' AND id=new.id) AND log_action='UPDATE' AND id=new.id; --Aufraeumen des ungewollten Datensatz beim INSERT (erzeugt durch den UPDATE TRIGGER)
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_scheduling_log_UPDATE;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_scheduling_log_UPDATE AFTER UPDATE
ON scheduling
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   UPDATE scheduling SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   INSERT INTO scheduling_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,fk_tool_id, fk_tool_uuid,scheduling_series,fk_deleted_status_id, fk_deleted_status_uuid,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid,source_definition,source_definition_language,source_comment) VALUES ('UPDATE',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.fk_project_id, (SELECT uuid FROM project WHERE id=new.fk_project_id),new.name,new.description,new.fk_tool_id, (SELECT uuid FROM tool WHERE id=new.fk_tool_id),new.scheduling_series,new.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=new.fk_deleted_status_id),new.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=new.fk_object_persistence_method_id),new.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=new.fk_datamanagement_process_id),new.source_definition,new.source_definition_language,new.source_comment);
   DELETE FROM _newUUID;
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_scheduling_log_DELETE;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_scheduling_log_DELETE AFTER DELETE
ON scheduling
BEGIN
   INSERT INTO scheduling_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,fk_tool_id, fk_tool_uuid,scheduling_series,fk_deleted_status_id, fk_deleted_status_uuid,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid,source_definition,source_definition_language,source_comment) VALUES ('DELETE',old.id,old.uuid,old.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=old.fk_object_type_id),old.fk_project_id, (SELECT uuid FROM project WHERE id=old.fk_project_id),old.name,old.description,old.fk_tool_id, (SELECT uuid FROM tool WHERE id=old.fk_tool_id),old.scheduling_series,old.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=old.fk_deleted_status_id),old.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=old.fk_object_persistence_method_id),old.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=old.fk_datamanagement_process_id),old.source_definition,old.source_definition_language,old.source_comment);

   INSERT INTO cleanup_queue (ref_fk_object_id, ref_fk_object_type_id) VALUES (old.id, old.fk_object_type_id);
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_parameter_log_INSERT;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_parameter_log_INSERT AFTER INSERT
ON parameter
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   INSERT INTO parameter_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,is_optional,default_value,datatype,range,fk_deleted_status_id, fk_deleted_status_uuid,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid,source_definition,source_definition_language,source_comment) VALUES ('INSERT',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.fk_project_id, (SELECT uuid FROM project WHERE id=new.fk_project_id),new.name,new.description,new.is_optional,new.default_value,new.datatype,new.range,new.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=new.fk_deleted_status_id),new.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=new.fk_object_persistence_method_id),new.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=new.fk_datamanagement_process_id),new.source_definition,new.source_definition_language,new.source_comment);
   UPDATE parameter SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   DELETE FROM _newUUID;
   DELETE FROM parameter_log WHERE log_id=(SELECT MAX(log_id)+1 FROM parameter_log WHERE log_action='INSERT' AND id=new.id) AND log_action='UPDATE' AND id=new.id; --Aufraeumen des ungewollten Datensatz beim INSERT (erzeugt durch den UPDATE TRIGGER)
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_parameter_log_UPDATE;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_parameter_log_UPDATE AFTER UPDATE
ON parameter
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   UPDATE parameter SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   INSERT INTO parameter_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,is_optional,default_value,datatype,range,fk_deleted_status_id, fk_deleted_status_uuid,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid,source_definition,source_definition_language,source_comment) VALUES ('UPDATE',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.fk_project_id, (SELECT uuid FROM project WHERE id=new.fk_project_id),new.name,new.description,new.is_optional,new.default_value,new.datatype,new.range,new.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=new.fk_deleted_status_id),new.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=new.fk_object_persistence_method_id),new.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=new.fk_datamanagement_process_id),new.source_definition,new.source_definition_language,new.source_comment);
   DELETE FROM _newUUID;
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_parameter_log_DELETE;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_parameter_log_DELETE AFTER DELETE
ON parameter
BEGIN
   INSERT INTO parameter_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,is_optional,default_value,datatype,range,fk_deleted_status_id, fk_deleted_status_uuid,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid,source_definition,source_definition_language,source_comment) VALUES ('DELETE',old.id,old.uuid,old.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=old.fk_object_type_id),old.fk_project_id, (SELECT uuid FROM project WHERE id=old.fk_project_id),old.name,old.description,old.is_optional,old.default_value,old.datatype,old.range,old.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=old.fk_deleted_status_id),old.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=old.fk_object_persistence_method_id),old.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=old.fk_datamanagement_process_id),old.source_definition,old.source_definition_language,old.source_comment);

   INSERT INTO cleanup_queue (ref_fk_object_id, ref_fk_object_type_id) VALUES (old.id, old.fk_object_type_id);
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_db_table_type_log_INSERT;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_db_table_type_log_INSERT AFTER INSERT
ON db_table_type
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   INSERT INTO db_table_type_log (log_action, id,uuid,name,description,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid,source_definition_language) VALUES ('INSERT',new.id,(SELECT uuid FROM _newUUID),new.name,new.description,new.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=new.fk_object_persistence_method_id),new.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=new.fk_datamanagement_process_id),new.source_definition_language);
   UPDATE db_table_type SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   DELETE FROM _newUUID;
   DELETE FROM db_table_type_log WHERE log_id=(SELECT MAX(log_id)+1 FROM db_table_type_log WHERE log_action='INSERT' AND id=new.id) AND log_action='UPDATE' AND id=new.id; --Aufraeumen des ungewollten Datensatz beim INSERT (erzeugt durch den UPDATE TRIGGER)
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_db_table_type_log_UPDATE;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_db_table_type_log_UPDATE AFTER UPDATE
ON db_table_type
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   UPDATE db_table_type SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   INSERT INTO db_table_type_log (log_action, id,uuid,name,description,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid,source_definition_language) VALUES ('UPDATE',new.id,(SELECT uuid FROM _newUUID),new.name,new.description,new.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=new.fk_object_persistence_method_id),new.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=new.fk_datamanagement_process_id),new.source_definition_language);
   DELETE FROM _newUUID;
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_db_table_type_log_DELETE;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_db_table_type_log_DELETE AFTER DELETE
ON db_table_type
BEGIN
   INSERT INTO db_table_type_log (log_action, id,uuid,name,description,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid,source_definition_language) VALUES ('DELETE',old.id,old.uuid,old.name,old.description,old.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=old.fk_object_persistence_method_id),old.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=old.fk_datamanagement_process_id),old.source_definition_language);
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_object_comment_log_INSERT;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_object_comment_log_INSERT AFTER INSERT
ON object_comment
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   INSERT INTO object_comment_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,ref_fk_object_id,ref_fk_object_type_id,comment,created_at_datetime,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid) VALUES ('INSERT',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.ref_fk_object_id,new.ref_fk_object_type_id,new.comment,new.created_at_datetime,new.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=new.fk_object_persistence_method_id),new.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=new.fk_datamanagement_process_id));
   UPDATE object_comment SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   DELETE FROM _newUUID;
   DELETE FROM object_comment_log WHERE log_id=(SELECT MAX(log_id)+1 FROM object_comment_log WHERE log_action='INSERT' AND id=new.id) AND log_action='UPDATE' AND id=new.id; --Aufraeumen des ungewollten Datensatz beim INSERT (erzeugt durch den UPDATE TRIGGER)
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_object_comment_log_UPDATE;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_object_comment_log_UPDATE AFTER UPDATE
ON object_comment
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   UPDATE object_comment SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   INSERT INTO object_comment_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,ref_fk_object_id,ref_fk_object_type_id,comment,created_at_datetime,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid) VALUES ('UPDATE',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.ref_fk_object_id,new.ref_fk_object_type_id,new.comment,new.created_at_datetime,new.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=new.fk_object_persistence_method_id),new.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=new.fk_datamanagement_process_id));
   DELETE FROM _newUUID;
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_object_comment_log_DELETE;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_object_comment_log_DELETE AFTER DELETE
ON object_comment
BEGIN
   INSERT INTO object_comment_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,ref_fk_object_id,ref_fk_object_type_id,comment,created_at_datetime,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid) VALUES ('DELETE',old.id,old.uuid,old.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=old.fk_object_type_id),old.ref_fk_object_id,old.ref_fk_object_type_id,old.comment,old.created_at_datetime,old.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=old.fk_object_persistence_method_id),old.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=old.fk_datamanagement_process_id));

   INSERT INTO cleanup_queue (ref_fk_object_id, ref_fk_object_type_id) VALUES (old.id, old.fk_object_type_id);
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_glossary_log_INSERT;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_glossary_log_INSERT AFTER INSERT
ON glossary
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   INSERT INTO glossary_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid) VALUES ('INSERT',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.fk_project_id, (SELECT uuid FROM project WHERE id=new.fk_project_id),new.name,new.description,new.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=new.fk_object_persistence_method_id),new.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=new.fk_datamanagement_process_id));
   UPDATE glossary SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   DELETE FROM _newUUID;
   DELETE FROM glossary_log WHERE log_id=(SELECT MAX(log_id)+1 FROM glossary_log WHERE log_action='INSERT' AND id=new.id) AND log_action='UPDATE' AND id=new.id; --Aufraeumen des ungewollten Datensatz beim INSERT (erzeugt durch den UPDATE TRIGGER)
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_glossary_log_UPDATE;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_glossary_log_UPDATE AFTER UPDATE
ON glossary
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   UPDATE glossary SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   INSERT INTO glossary_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid) VALUES ('UPDATE',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.fk_project_id, (SELECT uuid FROM project WHERE id=new.fk_project_id),new.name,new.description,new.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=new.fk_object_persistence_method_id),new.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=new.fk_datamanagement_process_id));
   DELETE FROM _newUUID;
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_glossary_log_DELETE;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_glossary_log_DELETE AFTER DELETE
ON glossary
BEGIN
   INSERT INTO glossary_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid) VALUES ('DELETE',old.id,old.uuid,old.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=old.fk_object_type_id),old.fk_project_id, (SELECT uuid FROM project WHERE id=old.fk_project_id),old.name,old.description,old.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=old.fk_object_persistence_method_id),old.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=old.fk_datamanagement_process_id));

   INSERT INTO cleanup_queue (ref_fk_object_id, ref_fk_object_type_id) VALUES (old.id, old.fk_object_type_id);
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_data_delivery_type_log_INSERT;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_data_delivery_type_log_INSERT AFTER INSERT
ON data_delivery_type
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   INSERT INTO data_delivery_type_log (log_action, id,uuid,name,description,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid,source_definition_language) VALUES ('INSERT',new.id,(SELECT uuid FROM _newUUID),new.name,new.description,new.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=new.fk_object_persistence_method_id),new.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=new.fk_datamanagement_process_id),new.source_definition_language);
   UPDATE data_delivery_type SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   DELETE FROM _newUUID;
   DELETE FROM data_delivery_type_log WHERE log_id=(SELECT MAX(log_id)+1 FROM data_delivery_type_log WHERE log_action='INSERT' AND id=new.id) AND log_action='UPDATE' AND id=new.id; --Aufraeumen des ungewollten Datensatz beim INSERT (erzeugt durch den UPDATE TRIGGER)
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_data_delivery_type_log_UPDATE;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_data_delivery_type_log_UPDATE AFTER UPDATE
ON data_delivery_type
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   UPDATE data_delivery_type SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   INSERT INTO data_delivery_type_log (log_action, id,uuid,name,description,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid,source_definition_language) VALUES ('UPDATE',new.id,(SELECT uuid FROM _newUUID),new.name,new.description,new.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=new.fk_object_persistence_method_id),new.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=new.fk_datamanagement_process_id),new.source_definition_language);
   DELETE FROM _newUUID;
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_data_delivery_type_log_DELETE;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_data_delivery_type_log_DELETE AFTER DELETE
ON data_delivery_type
BEGIN
   INSERT INTO data_delivery_type_log (log_action, id,uuid,name,description,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid,source_definition_language) VALUES ('DELETE',old.id,old.uuid,old.name,old.description,old.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=old.fk_object_persistence_method_id),old.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=old.fk_datamanagement_process_id),old.source_definition_language);
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_data_transfer_process_log_INSERT;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_data_transfer_process_log_INSERT AFTER INSERT
ON data_transfer_process
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   INSERT INTO data_transfer_process_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,fk_data_transfer_type_id, fk_data_transfer_type_uuid,location,source_internal_object_id,fk_deleted_status_id, fk_deleted_status_uuid,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid,source_definition,source_comment) VALUES ('INSERT',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.fk_project_id, (SELECT uuid FROM project WHERE id=new.fk_project_id),new.name,new.description,new.fk_data_transfer_type_id, (SELECT uuid FROM data_transfer_type WHERE id=new.fk_data_transfer_type_id),new.location,new.source_internal_object_id,new.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=new.fk_deleted_status_id),new.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=new.fk_object_persistence_method_id),new.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=new.fk_datamanagement_process_id),new.source_definition,new.source_comment);
   UPDATE data_transfer_process SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   DELETE FROM _newUUID;
   DELETE FROM data_transfer_process_log WHERE log_id=(SELECT MAX(log_id)+1 FROM data_transfer_process_log WHERE log_action='INSERT' AND id=new.id) AND log_action='UPDATE' AND id=new.id; --Aufraeumen des ungewollten Datensatz beim INSERT (erzeugt durch den UPDATE TRIGGER)
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_data_transfer_process_log_UPDATE;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_data_transfer_process_log_UPDATE AFTER UPDATE
ON data_transfer_process
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   UPDATE data_transfer_process SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   INSERT INTO data_transfer_process_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,fk_data_transfer_type_id, fk_data_transfer_type_uuid,location,source_internal_object_id,fk_deleted_status_id, fk_deleted_status_uuid,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid,source_definition,source_comment) VALUES ('UPDATE',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.fk_project_id, (SELECT uuid FROM project WHERE id=new.fk_project_id),new.name,new.description,new.fk_data_transfer_type_id, (SELECT uuid FROM data_transfer_type WHERE id=new.fk_data_transfer_type_id),new.location,new.source_internal_object_id,new.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=new.fk_deleted_status_id),new.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=new.fk_object_persistence_method_id),new.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=new.fk_datamanagement_process_id),new.source_definition,new.source_comment);
   DELETE FROM _newUUID;
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_data_transfer_process_log_DELETE;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_data_transfer_process_log_DELETE AFTER DELETE
ON data_transfer_process
BEGIN
   INSERT INTO data_transfer_process_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,fk_data_transfer_type_id, fk_data_transfer_type_uuid,location,source_internal_object_id,fk_deleted_status_id, fk_deleted_status_uuid,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid,source_definition,source_comment) VALUES ('DELETE',old.id,old.uuid,old.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=old.fk_object_type_id),old.fk_project_id, (SELECT uuid FROM project WHERE id=old.fk_project_id),old.name,old.description,old.fk_data_transfer_type_id, (SELECT uuid FROM data_transfer_type WHERE id=old.fk_data_transfer_type_id),old.location,old.source_internal_object_id,old.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=old.fk_deleted_status_id),old.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=old.fk_object_persistence_method_id),old.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=old.fk_datamanagement_process_id),old.source_definition,old.source_comment);

   INSERT INTO cleanup_queue (ref_fk_object_id, ref_fk_object_type_id) VALUES (old.id, old.fk_object_type_id);
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_data_transfer_type_log_INSERT;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_data_transfer_type_log_INSERT AFTER INSERT
ON data_transfer_type
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   INSERT INTO data_transfer_type_log (log_action, id,uuid,name,description,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid,source_definition_language) VALUES ('INSERT',new.id,(SELECT uuid FROM _newUUID),new.name,new.description,new.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=new.fk_object_persistence_method_id),new.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=new.fk_datamanagement_process_id),new.source_definition_language);
   UPDATE data_transfer_type SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   DELETE FROM _newUUID;
   DELETE FROM data_transfer_type_log WHERE log_id=(SELECT MAX(log_id)+1 FROM data_transfer_type_log WHERE log_action='INSERT' AND id=new.id) AND log_action='UPDATE' AND id=new.id; --Aufraeumen des ungewollten Datensatz beim INSERT (erzeugt durch den UPDATE TRIGGER)
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_data_transfer_type_log_UPDATE;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_data_transfer_type_log_UPDATE AFTER UPDATE
ON data_transfer_type
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   UPDATE data_transfer_type SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   INSERT INTO data_transfer_type_log (log_action, id,uuid,name,description,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid,source_definition_language) VALUES ('UPDATE',new.id,(SELECT uuid FROM _newUUID),new.name,new.description,new.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=new.fk_object_persistence_method_id),new.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=new.fk_datamanagement_process_id),new.source_definition_language);
   DELETE FROM _newUUID;
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_data_transfer_type_log_DELETE;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_data_transfer_type_log_DELETE AFTER DELETE
ON data_transfer_type
BEGIN
   INSERT INTO data_transfer_type_log (log_action, id,uuid,name,description,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid,source_definition_language) VALUES ('DELETE',old.id,old.uuid,old.name,old.description,old.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=old.fk_object_persistence_method_id),old.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=old.fk_datamanagement_process_id),old.source_definition_language);
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_contact_group_log_INSERT;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_contact_group_log_INSERT AFTER INSERT
ON contact_group
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   INSERT INTO contact_group_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_client_id, fk_client_uuid,name,description,short_name,fk_deleted_status_id, fk_deleted_status_uuid,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid) VALUES ('INSERT',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.fk_client_id, (SELECT uuid FROM client WHERE id=new.fk_client_id),new.name,new.description,new.short_name,new.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=new.fk_deleted_status_id),new.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=new.fk_object_persistence_method_id),new.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=new.fk_datamanagement_process_id));
   UPDATE contact_group SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   DELETE FROM _newUUID;
   DELETE FROM contact_group_log WHERE log_id=(SELECT MAX(log_id)+1 FROM contact_group_log WHERE log_action='INSERT' AND id=new.id) AND log_action='UPDATE' AND id=new.id; --Aufraeumen des ungewollten Datensatz beim INSERT (erzeugt durch den UPDATE TRIGGER)
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_contact_group_log_UPDATE;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_contact_group_log_UPDATE AFTER UPDATE
ON contact_group
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   UPDATE contact_group SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   INSERT INTO contact_group_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_client_id, fk_client_uuid,name,description,short_name,fk_deleted_status_id, fk_deleted_status_uuid,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid) VALUES ('UPDATE',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.fk_client_id, (SELECT uuid FROM client WHERE id=new.fk_client_id),new.name,new.description,new.short_name,new.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=new.fk_deleted_status_id),new.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=new.fk_object_persistence_method_id),new.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=new.fk_datamanagement_process_id));
   DELETE FROM _newUUID;
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_contact_group_log_DELETE;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_contact_group_log_DELETE AFTER DELETE
ON contact_group
BEGIN
   INSERT INTO contact_group_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_client_id, fk_client_uuid,name,description,short_name,fk_deleted_status_id, fk_deleted_status_uuid,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid) VALUES ('DELETE',old.id,old.uuid,old.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=old.fk_object_type_id),old.fk_client_id, (SELECT uuid FROM client WHERE id=old.fk_client_id),old.name,old.description,old.short_name,old.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=old.fk_deleted_status_id),old.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=old.fk_object_persistence_method_id),old.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=old.fk_datamanagement_process_id));

   INSERT INTO cleanup_queue (ref_fk_object_id, ref_fk_object_type_id) VALUES (old.id, old.fk_object_type_id);
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_contact_log_INSERT;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_contact_log_INSERT AFTER INSERT
ON contact
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   INSERT INTO contact_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_contact_group_id, fk_contact_group_uuid,fk_client_id, fk_client_uuid,givenname,surname,email,phone,mobile,ldap_cn,description,fk_deleted_status_id, fk_deleted_status_uuid,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid) VALUES ('INSERT',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.fk_contact_group_id, (SELECT uuid FROM contact_group WHERE id=new.fk_contact_group_id),new.fk_client_id, (SELECT uuid FROM client WHERE id=new.fk_client_id),new.givenname,new.surname,new.email,new.phone,new.mobile,new.ldap_cn,new.description,new.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=new.fk_deleted_status_id),new.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=new.fk_object_persistence_method_id),new.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=new.fk_datamanagement_process_id));
   UPDATE contact SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   DELETE FROM _newUUID;
   DELETE FROM contact_log WHERE log_id=(SELECT MAX(log_id)+1 FROM contact_log WHERE log_action='INSERT' AND id=new.id) AND log_action='UPDATE' AND id=new.id; --Aufraeumen des ungewollten Datensatz beim INSERT (erzeugt durch den UPDATE TRIGGER)
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_contact_log_UPDATE;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_contact_log_UPDATE AFTER UPDATE
ON contact
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   UPDATE contact SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   INSERT INTO contact_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_contact_group_id, fk_contact_group_uuid,fk_client_id, fk_client_uuid,givenname,surname,email,phone,mobile,ldap_cn,description,fk_deleted_status_id, fk_deleted_status_uuid,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid) VALUES ('UPDATE',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.fk_contact_group_id, (SELECT uuid FROM contact_group WHERE id=new.fk_contact_group_id),new.fk_client_id, (SELECT uuid FROM client WHERE id=new.fk_client_id),new.givenname,new.surname,new.email,new.phone,new.mobile,new.ldap_cn,new.description,new.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=new.fk_deleted_status_id),new.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=new.fk_object_persistence_method_id),new.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=new.fk_datamanagement_process_id));
   DELETE FROM _newUUID;
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_contact_log_DELETE;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_contact_log_DELETE AFTER DELETE
ON contact
BEGIN
   INSERT INTO contact_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_contact_group_id, fk_contact_group_uuid,fk_client_id, fk_client_uuid,givenname,surname,email,phone,mobile,ldap_cn,description,fk_deleted_status_id, fk_deleted_status_uuid,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid) VALUES ('DELETE',old.id,old.uuid,old.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=old.fk_object_type_id),old.fk_contact_group_id, (SELECT uuid FROM contact_group WHERE id=old.fk_contact_group_id),old.fk_client_id, (SELECT uuid FROM client WHERE id=old.fk_client_id),old.givenname,old.surname,old.email,old.phone,old.mobile,old.ldap_cn,old.description,old.fk_deleted_status_id, (SELECT uuid FROM deleted_status WHERE id=old.fk_deleted_status_id),old.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=old.fk_object_persistence_method_id),old.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=old.fk_datamanagement_process_id));

   INSERT INTO cleanup_queue (ref_fk_object_id, ref_fk_object_type_id) VALUES (old.id, old.fk_object_type_id);
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_bracket_log_INSERT;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_bracket_log_INSERT AFTER INSERT
ON bracket
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   INSERT INTO bracket_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,fk_attribute_id, fk_attribute_uuid,fk_object_type_id_as_searchFilter, fk_object_type_uuid_as_searchFilter,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid) VALUES ('INSERT',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.fk_project_id, (SELECT uuid FROM project WHERE id=new.fk_project_id),new.name,new.description,new.fk_attribute_id, (SELECT uuid FROM attribute WHERE id=new.fk_attribute_id),new.fk_object_type_id_as_searchFilter, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id_as_searchFilter),new.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=new.fk_object_persistence_method_id),new.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=new.fk_datamanagement_process_id));
   UPDATE bracket SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   DELETE FROM _newUUID;
   DELETE FROM bracket_log WHERE log_id=(SELECT MAX(log_id)+1 FROM bracket_log WHERE log_action='INSERT' AND id=new.id) AND log_action='UPDATE' AND id=new.id; --Aufraeumen des ungewollten Datensatz beim INSERT (erzeugt durch den UPDATE TRIGGER)
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_bracket_log_UPDATE;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_bracket_log_UPDATE AFTER UPDATE
ON bracket
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   UPDATE bracket SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   INSERT INTO bracket_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,fk_attribute_id, fk_attribute_uuid,fk_object_type_id_as_searchFilter, fk_object_type_uuid_as_searchFilter,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid) VALUES ('UPDATE',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.fk_project_id, (SELECT uuid FROM project WHERE id=new.fk_project_id),new.name,new.description,new.fk_attribute_id, (SELECT uuid FROM attribute WHERE id=new.fk_attribute_id),new.fk_object_type_id_as_searchFilter, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id_as_searchFilter),new.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=new.fk_object_persistence_method_id),new.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=new.fk_datamanagement_process_id));
   DELETE FROM _newUUID;
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_bracket_log_DELETE;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_bracket_log_DELETE AFTER DELETE
ON bracket
BEGIN
   INSERT INTO bracket_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,fk_attribute_id, fk_attribute_uuid,fk_object_type_id_as_searchFilter, fk_object_type_uuid_as_searchFilter,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid) VALUES ('DELETE',old.id,old.uuid,old.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=old.fk_object_type_id),old.fk_project_id, (SELECT uuid FROM project WHERE id=old.fk_project_id),old.name,old.description,old.fk_attribute_id, (SELECT uuid FROM attribute WHERE id=old.fk_attribute_id),old.fk_object_type_id_as_searchFilter, (SELECT uuid FROM object_type WHERE id=old.fk_object_type_id_as_searchFilter),old.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=old.fk_object_persistence_method_id),old.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=old.fk_datamanagement_process_id));

   INSERT INTO cleanup_queue (ref_fk_object_id, ref_fk_object_type_id) VALUES (old.id, old.fk_object_type_id);
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_bracket_searchPattern_log_INSERT;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_bracket_searchPattern_log_INSERT AFTER INSERT
ON bracket_searchPattern
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   INSERT INTO bracket_searchPattern_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_bracket_id, fk_bracket_uuid,searchPattern,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid) VALUES ('INSERT',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.fk_bracket_id, (SELECT uuid FROM bracket WHERE id=new.fk_bracket_id),new.searchPattern,new.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=new.fk_object_persistence_method_id),new.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=new.fk_datamanagement_process_id));
   UPDATE bracket_searchPattern SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   DELETE FROM _newUUID;
   DELETE FROM bracket_searchPattern_log WHERE log_id=(SELECT MAX(log_id)+1 FROM bracket_searchPattern_log WHERE log_action='INSERT' AND id=new.id) AND log_action='UPDATE' AND id=new.id; --Aufraeumen des ungewollten Datensatz beim INSERT (erzeugt durch den UPDATE TRIGGER)
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_bracket_searchPattern_log_UPDATE;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_bracket_searchPattern_log_UPDATE AFTER UPDATE
ON bracket_searchPattern
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   UPDATE bracket_searchPattern SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   INSERT INTO bracket_searchPattern_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_bracket_id, fk_bracket_uuid,searchPattern,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid) VALUES ('UPDATE',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.fk_bracket_id, (SELECT uuid FROM bracket WHERE id=new.fk_bracket_id),new.searchPattern,new.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=new.fk_object_persistence_method_id),new.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=new.fk_datamanagement_process_id));
   DELETE FROM _newUUID;
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_bracket_searchPattern_log_DELETE;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_bracket_searchPattern_log_DELETE AFTER DELETE
ON bracket_searchPattern
BEGIN
   INSERT INTO bracket_searchPattern_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_bracket_id, fk_bracket_uuid,searchPattern,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid) VALUES ('DELETE',old.id,old.uuid,old.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=old.fk_object_type_id),old.fk_bracket_id, (SELECT uuid FROM bracket WHERE id=old.fk_bracket_id),old.searchPattern,old.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=old.fk_object_persistence_method_id),old.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=old.fk_datamanagement_process_id));

   INSERT INTO cleanup_queue (ref_fk_object_id, ref_fk_object_type_id) VALUES (old.id, old.fk_object_type_id);
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_perspective_filter_log_INSERT;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_perspective_filter_log_INSERT AFTER INSERT
ON perspective_filter
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   INSERT INTO perspective_filter_log (log_action, id,uuid,fk_language_id, fk_object_type_id, fk_object_type_uuid,filter_attribute_name,filter_value,ref_fk_object_type_id,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid) VALUES ('INSERT',new.id,(SELECT uuid FROM _newUUID),new.fk_language_id, new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.filter_attribute_name,new.filter_value,new.ref_fk_object_type_id,new.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=new.fk_object_persistence_method_id),new.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=new.fk_datamanagement_process_id));
   UPDATE perspective_filter SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   DELETE FROM _newUUID;
   DELETE FROM perspective_filter_log WHERE log_id=(SELECT MAX(log_id)+1 FROM perspective_filter_log WHERE log_action='INSERT' AND id=new.id) AND log_action='UPDATE' AND id=new.id; --Aufraeumen des ungewollten Datensatz beim INSERT (erzeugt durch den UPDATE TRIGGER)
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_perspective_filter_log_UPDATE;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_perspective_filter_log_UPDATE AFTER UPDATE
ON perspective_filter
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   UPDATE perspective_filter SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   INSERT INTO perspective_filter_log (log_action, id,uuid,fk_language_id, fk_object_type_id, fk_object_type_uuid,filter_attribute_name,filter_value,ref_fk_object_type_id,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid) VALUES ('UPDATE',new.id,(SELECT uuid FROM _newUUID),new.fk_language_id, new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.filter_attribute_name,new.filter_value,new.ref_fk_object_type_id,new.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=new.fk_object_persistence_method_id),new.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=new.fk_datamanagement_process_id));
   DELETE FROM _newUUID;
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_perspective_filter_log_DELETE;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_perspective_filter_log_DELETE AFTER DELETE
ON perspective_filter
BEGIN
   INSERT INTO perspective_filter_log (log_action, id,uuid,fk_language_id, fk_object_type_id, fk_object_type_uuid,filter_attribute_name,filter_value,ref_fk_object_type_id,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid) VALUES ('DELETE',old.id,old.uuid,old.fk_language_id, old.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=old.fk_object_type_id),old.filter_attribute_name,old.filter_value,old.ref_fk_object_type_id,old.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=old.fk_object_persistence_method_id),old.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=old.fk_datamanagement_process_id));

   INSERT INTO cleanup_queue (ref_fk_object_id, ref_fk_object_type_id) VALUES (old.id, old.fk_object_type_id);
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_mapping_qualifier_log_INSERT;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_mapping_qualifier_log_INSERT AFTER INSERT
ON mapping_qualifier
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   INSERT INTO mapping_qualifier_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,name,short_name,description,needs_object_depends_on,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid) VALUES ('INSERT',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.name,new.short_name,new.description,new.needs_object_depends_on,new.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=new.fk_object_persistence_method_id),new.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=new.fk_datamanagement_process_id));
   UPDATE mapping_qualifier SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   DELETE FROM _newUUID;
   DELETE FROM mapping_qualifier_log WHERE log_id=(SELECT MAX(log_id)+1 FROM mapping_qualifier_log WHERE log_action='INSERT' AND id=new.id) AND log_action='UPDATE' AND id=new.id; --Aufraeumen des ungewollten Datensatz beim INSERT (erzeugt durch den UPDATE TRIGGER)
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_mapping_qualifier_log_UPDATE;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_mapping_qualifier_log_UPDATE AFTER UPDATE
ON mapping_qualifier
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   UPDATE mapping_qualifier SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   INSERT INTO mapping_qualifier_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,name,short_name,description,needs_object_depends_on,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid) VALUES ('UPDATE',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.name,new.short_name,new.description,new.needs_object_depends_on,new.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=new.fk_object_persistence_method_id),new.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=new.fk_datamanagement_process_id));
   DELETE FROM _newUUID;
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_mapping_qualifier_log_DELETE;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_mapping_qualifier_log_DELETE AFTER DELETE
ON mapping_qualifier
BEGIN
   INSERT INTO mapping_qualifier_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,name,short_name,description,needs_object_depends_on,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid) VALUES ('DELETE',old.id,old.uuid,old.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=old.fk_object_type_id),old.name,old.short_name,old.description,old.needs_object_depends_on,old.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=old.fk_object_persistence_method_id),old.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=old.fk_datamanagement_process_id));

   INSERT INTO cleanup_queue (ref_fk_object_id, ref_fk_object_type_id) VALUES (old.id, old.fk_object_type_id);
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_url_log_INSERT;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_url_log_INSERT AFTER INSERT
ON url
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   INSERT INTO url_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,url,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid) VALUES ('INSERT',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.fk_project_id, (SELECT uuid FROM project WHERE id=new.fk_project_id),new.name,new.description,new.url,new.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=new.fk_object_persistence_method_id),new.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=new.fk_datamanagement_process_id));
   UPDATE url SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   DELETE FROM _newUUID;
   DELETE FROM url_log WHERE log_id=(SELECT MAX(log_id)+1 FROM url_log WHERE log_action='INSERT' AND id=new.id) AND log_action='UPDATE' AND id=new.id; --Aufraeumen des ungewollten Datensatz beim INSERT (erzeugt durch den UPDATE TRIGGER)
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_url_log_UPDATE;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_url_log_UPDATE AFTER UPDATE
ON url
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   UPDATE url SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   INSERT INTO url_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,url,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid) VALUES ('UPDATE',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.fk_project_id, (SELECT uuid FROM project WHERE id=new.fk_project_id),new.name,new.description,new.url,new.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=new.fk_object_persistence_method_id),new.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=new.fk_datamanagement_process_id));
   DELETE FROM _newUUID;
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_url_log_DELETE;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_url_log_DELETE AFTER DELETE
ON url
BEGIN
   INSERT INTO url_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,fk_project_id, fk_project_uuid,name,description,url,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid) VALUES ('DELETE',old.id,old.uuid,old.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=old.fk_object_type_id),old.fk_project_id, (SELECT uuid FROM project WHERE id=old.fk_project_id),old.name,old.description,old.url,old.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=old.fk_object_persistence_method_id),old.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=old.fk_datamanagement_process_id));

   INSERT INTO cleanup_queue (ref_fk_object_id, ref_fk_object_type_id) VALUES (old.id, old.fk_object_type_id);
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_deleted_status_log_INSERT;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_deleted_status_log_INSERT AFTER INSERT
ON deleted_status
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   INSERT INTO deleted_status_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,name,description,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid) VALUES ('INSERT',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.name,new.description,new.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=new.fk_object_persistence_method_id),new.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=new.fk_datamanagement_process_id));
   UPDATE deleted_status SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   DELETE FROM _newUUID;
   DELETE FROM deleted_status_log WHERE log_id=(SELECT MAX(log_id)+1 FROM deleted_status_log WHERE log_action='INSERT' AND id=new.id) AND log_action='UPDATE' AND id=new.id; --Aufraeumen des ungewollten Datensatz beim INSERT (erzeugt durch den UPDATE TRIGGER)
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_deleted_status_log_UPDATE;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_deleted_status_log_UPDATE AFTER UPDATE
ON deleted_status
BEGIN
   INSERT INTO _newUUID (uuid) VALUES (hex(randomblob(16)));
   UPDATE deleted_status SET uuid=(SELECT uuid FROM _newUUID) WHERE id=new.id;
   INSERT INTO deleted_status_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,name,description,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid) VALUES ('UPDATE',new.id,(SELECT uuid FROM _newUUID),new.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=new.fk_object_type_id),new.name,new.description,new.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=new.fk_object_persistence_method_id),new.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=new.fk_datamanagement_process_id));
   DELETE FROM _newUUID;
END;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
DROP TRIGGER IF EXISTS TRIG_deleted_status_log_DELETE;
		]]>		
		</sql>
		
		<sql stripComments="false" splitStatements="false">
		<![CDATA[
CREATE TRIGGER TRIG_deleted_status_log_DELETE AFTER DELETE
ON deleted_status
BEGIN
   INSERT INTO deleted_status_log (log_action, id,uuid,fk_object_type_id, fk_object_type_uuid,name,description,fk_object_persistence_method_id, fk_object_persistence_method_uuid,fk_datamanagement_process_id, fk_datamanagement_process_uuid) VALUES ('DELETE',old.id,old.uuid,old.fk_object_type_id, (SELECT uuid FROM object_type WHERE id=old.fk_object_type_id),old.name,old.description,old.fk_object_persistence_method_id, (SELECT uuid FROM object_persistence_method WHERE id=old.fk_object_persistence_method_id),old.fk_datamanagement_process_id, (SELECT uuid FROM datamanagement_process WHERE id=old.fk_datamanagement_process_id));

   INSERT INTO cleanup_queue (ref_fk_object_id, ref_fk_object_type_id) VALUES (old.id, old.fk_object_type_id);
END;
		]]>		
		</sql>

	
		<comment>
		<![CDATA[
		Handling new fields "source_definition", "source_definition_language", "source_comment", "fk_datamanagement_process_id", "fk_datamanagement_process_uuid", "fk_object_persistence_method_id", "fk_object_persistence_method_uuid" for Log-TRIGGER.
		Used objects:
			TRIG_db_table_context_log_INSERT
			TRIG_db_table_context_log_UPDATE
			TRIG_db_table_context_log_DELETE
			TRIG_db_database_log_INSERT
			TRIG_db_database_log_UPDATE
			TRIG_db_database_log_DELETE
			TRIG_scheduling_log_INSERT
			TRIG_scheduling_log_UPDATE
			TRIG_scheduling_log_DELETE
			TRIG_parameter_log_INSERT
			TRIG_parameter_log_UPDATE
			TRIG_parameter_log_DELETE
			TRIG_db_table_type_log_INSERT
			TRIG_db_table_type_log_UPDATE
			TRIG_db_table_type_log_DELETE
			TRIG_object_comment_log_INSERT
			TRIG_object_comment_log_UPDATE
			TRIG_object_comment_log_DELETE
			TRIG_glossary_log_INSERT
			TRIG_glossary_log_UPDATE
			TRIG_glossary_log_DELETE
			TRIG_data_delivery_type_log_INSERT
			TRIG_data_delivery_type_log_UPDATE
			TRIG_data_delivery_type_log_DELETE
			TRIG_data_transfer_process_log_INSERT
			TRIG_data_transfer_process_log_UPDATE
			TRIG_data_transfer_process_log_DELETE
			TRIG_data_transfer_type_log_INSERT
			TRIG_data_transfer_type_log_UPDATE
			TRIG_data_transfer_type_log_DELETE
			TRIG_contact_group_log_INSERT
			TRIG_contact_group_log_UPDATE
			TRIG_contact_group_log_DELETE
			TRIG_contact_log_INSERT
			TRIG_contact_log_UPDATE
			TRIG_contact_log_DELETE
			TRIG_bracket_log_INSERT
			TRIG_bracket_log_UPDATE
			TRIG_bracket_log_DELETE
			TRIG_bracket_searchPattern_log_INSERT
			TRIG_bracket_searchPattern_log_UPDATE
			TRIG_bracket_searchPattern_log_DELETE
			TRIG_perspective_filter_log_INSERT
			TRIG_perspective_filter_log_UPDATE
			TRIG_perspective_filter_log_DELETE
			TRIG_mapping_qualifier_log_INSERT
			TRIG_mapping_qualifier_log_UPDATE
			TRIG_mapping_qualifier_log_DELETE
			TRIG_url_log_INSERT
			TRIG_url_log_UPDATE
			TRIG_url_log_DELETE
			TRIG_deleted_status_log_INSERT
			TRIG_deleted_status_log_UPDATE
			TRIG_deleted_status_log_DELETE
			TRIG_keyfigure_log_UPDATE
			TRIG_keyfigure_log_DELETE
			TRIG_client_log_INSERT
			TRIG_client_log_UPDATE
			TRIG_client_log_DELETE
			TRIG_project_log_INSERT
			TRIG_project_log_UPDATE
			TRIG_project_log_DELETE
			TRIG_sourcesystem_log_INSERT
			TRIG_sourcesystem_log_UPDATE
			TRIG_sourcesystem_log_DELETE
			TRIG_data_delivery_object_log_INSERT
			TRIG_data_delivery_object_log_UPDATE
			TRIG_data_delivery_object_log_DELETE
			TRIG_map_object_2_object_log_INSERT
			TRIG_map_object_2_object_log_UPDATE
			TRIG_map_object_2_object_log_DELETE
			TRIG_tool_log_INSERT
			TRIG_tool_log_UPDATE
			TRIG_tool_log_DELETE
			TRIG_object_depends_on_log_INSERT
			TRIG_object_depends_on_log_UPDATE
			TRIG_object_depends_on_log_DELETE
			TRIG_attribute_log_INSERT
			TRIG_attribute_log_UPDATE
			TRIG_attribute_log_DELETE
			TRIG_tool_type_log_INSERT
			TRIG_tool_type_log_UPDATE
			TRIG_tool_type_log_DELETE
			TRIG_db_table_log_INSERT
			TRIG_db_table_log_UPDATE
			TRIG_db_table_log_DELETE
			TRIG_db_table_field_log_INSERT
			TRIG_db_table_field_log_UPDATE
			TRIG_db_table_field_log_DELETE
		Phabricator tasks:
			T159
			T161
			T162
        ]]>
		</comment>
</changeSet>
</databaseChangeLog>
